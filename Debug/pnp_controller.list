
pnp_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003004  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003214  08003214  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800321c  0800321c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000001c  08003240  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003240  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f1f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018fa  00000000  00000000  00028fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000592  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c58  00000000  00000000  0002b582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a402  00000000  00000000  0004c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78a6  00000000  00000000  000565dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c9c  00000000  00000000  0011de84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031b0 	.word	0x080031b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	080031b0 	.word	0x080031b0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <processCommand>:
 */
#include <pnpdrivers.h>
#include "command.h"
#include <string.h>

uint8_t processCommand(const char* t_code_str,uint8_t t_code_index){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
    // Check if t_code_str is not NULL to avoid potential issues
    if (t_code_str == NULL) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <processCommand+0x16>
        return 0; // Indicate failure or error as needed
 8000512:	2300      	movs	r3, #0
 8000514:	e082      	b.n	800061c <processCommand+0x11c>
    }

    if (strncmp(t_code_str, "T00", 3) == 0) {
 8000516:	2203      	movs	r2, #3
 8000518:	4942      	ldr	r1, [pc, #264]	; (8000624 <processCommand+0x124>)
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f002 fe12 	bl	8003144 <strncmp>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <processCommand+0x2a>
        // Handle T00 code
    	//Move to coordinate	T00 X123 Y456 Z789 R90
        return 1;
 8000526:	2301      	movs	r3, #1
 8000528:	e078      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "T01", 3) == 0) {
 800052a:	2203      	movs	r2, #3
 800052c:	493e      	ldr	r1, [pc, #248]	; (8000628 <processCommand+0x128>)
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f002 fe08 	bl	8003144 <strncmp>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d101      	bne.n	800053e <processCommand+0x3e>
        // Handle T01 code
    	//Move certain distance	T01 X0 Y0 Z-15 R0	The head moves down 15 units
        return 2;
 800053a:	2302      	movs	r3, #2
 800053c:	e06e      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "T02", 3) == 0) {
 800053e:	2203      	movs	r2, #3
 8000540:	493a      	ldr	r1, [pc, #232]	; (800062c <processCommand+0x12c>)
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f002 fdfe 	bl	8003144 <strncmp>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <processCommand+0x52>
        // Handle T02 code
    	//Go to origin (0, 0, 0, 0)	T02	No parameters
        return 3;
 800054e:	2303      	movs	r3, #3
 8000550:	e064      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M03", 3) == 0) {
 8000552:	2203      	movs	r2, #3
 8000554:	4936      	ldr	r1, [pc, #216]	; (8000630 <processCommand+0x130>)
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f002 fdf4 	bl	8003144 <strncmp>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <processCommand+0x66>
        // Handle M03 code
    	//Turn on vacuum	M03	No parameters
        return 4;
 8000562:	2304      	movs	r3, #4
 8000564:	e05a      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M04", 3) == 0) {
 8000566:	2203      	movs	r2, #3
 8000568:	4932      	ldr	r1, [pc, #200]	; (8000634 <processCommand+0x134>)
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f002 fdea 	bl	8003144 <strncmp>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <processCommand+0x7a>
        // Handle M04 code
    	//Turn off vacuum	M04	No parameters
        return 5;
 8000576:	2305      	movs	r3, #5
 8000578:	e050      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M05", 3) == 0) {
 800057a:	2203      	movs	r2, #3
 800057c:	492e      	ldr	r1, [pc, #184]	; (8000638 <processCommand+0x138>)
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f002 fde0 	bl	8003144 <strncmp>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d101      	bne.n	800058e <processCommand+0x8e>
        // Handle M05 code
    	//Feed reel	M05 P15 (read)	Feeds reel with part number 15
        return 6;
 800058a:	2306      	movs	r3, #6
 800058c:	e046      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M06", 3) == 0) {
 800058e:	2203      	movs	r2, #3
 8000590:	492a      	ldr	r1, [pc, #168]	; (800063c <processCommand+0x13c>)
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f002 fdd6 	bl	8003144 <strncmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <processCommand+0xa2>
        // Handle M06 code
    	//Wait for reel	M06 P20 (read)	Waits until reel with part number 20 is loaded. Continues once it is loaded. If part already loaded, the it just continues
        return 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	e03c      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M07", 3) == 0) {
 80005a2:	2203      	movs	r2, #3
 80005a4:	4926      	ldr	r1, [pc, #152]	; (8000640 <processCommand+0x140>)
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f002 fdcc 	bl	8003144 <strncmp>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <processCommand+0xb6>
        // Handle M07 code
    	//Wait some time	M07 M550	Waits 550ms to continue
        return 8;
 80005b2:	2308      	movs	r3, #8
 80005b4:	e032      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M08", 3) == 0) {
 80005b6:	2203      	movs	r2, #3
 80005b8:	4922      	ldr	r1, [pc, #136]	; (8000644 <processCommand+0x144>)
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f002 fdc2 	bl	8003144 <strncmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <processCommand+0xca>
        // Handle M08 code
    	//Wait for feed	M08 P17	Waits until reel with part 17 finishes feeding
        return 9;
 80005c6:	2309      	movs	r3, #9
 80005c8:	e028      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "T09", 3) == 0) {
 80005ca:	2203      	movs	r2, #3
 80005cc:	491e      	ldr	r1, [pc, #120]	; (8000648 <processCommand+0x148>)
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 fdb8 	bl	8003144 <strncmp>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <processCommand+0xde>
        // Handle T09 code
    	//Calibrate	T09	No parameters. Will move in all directions until the limit switches are hit to determine the origin
        return 10;
 80005da:	230a      	movs	r3, #10
 80005dc:	e01e      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M10", 3) == 0) {
 80005de:	2203      	movs	r2, #3
 80005e0:	491a      	ldr	r1, [pc, #104]	; (800064c <processCommand+0x14c>)
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f002 fdae 	bl	8003144 <strncmp>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <processCommand+0xf2>
        // Handle M10 code
    	//M10	0xa	End of program	M10	No parameters. Indicates that the program is finished
        return 11;
 80005ee:	230b      	movs	r3, #11
 80005f0:	e014      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M11", 3) == 0) {
 80005f2:	2203      	movs	r2, #3
 80005f4:	4916      	ldr	r1, [pc, #88]	; (8000650 <processCommand+0x150>)
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f002 fda4 	bl	8003144 <strncmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <processCommand+0x106>
        // Handle M11 code
    	//M11	0xb	Emergency stop	M11	No parameters. Shuts down power to the motors
        return 12;
 8000602:	230c      	movs	r3, #12
 8000604:	e00a      	b.n	800061c <processCommand+0x11c>
    } else if (strncmp(t_code_str, "M12", 3) == 0) {
 8000606:	2203      	movs	r2, #3
 8000608:	4912      	ldr	r1, [pc, #72]	; (8000654 <processCommand+0x154>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f002 fd9a 	bl	8003144 <strncmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <processCommand+0x11a>
        // Handle M12 code
    	//M12	0xc	Start of program	M12	No parameters. Indicates that the program is started
        return 13;
 8000616:	230d      	movs	r3, #13
 8000618:	e000      	b.n	800061c <processCommand+0x11c>
    } else {
        // Handle the case when t_code_str doesn't match any of the specified codes
        return 0; // Indicate failure or error as needed
 800061a:	2300      	movs	r3, #0
    }
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	080031c8 	.word	0x080031c8
 8000628:	080031cc 	.word	0x080031cc
 800062c:	080031d0 	.word	0x080031d0
 8000630:	080031d4 	.word	0x080031d4
 8000634:	080031d8 	.word	0x080031d8
 8000638:	080031dc 	.word	0x080031dc
 800063c:	080031e0 	.word	0x080031e0
 8000640:	080031e4 	.word	0x080031e4
 8000644:	080031e8 	.word	0x080031e8
 8000648:	080031ec 	.word	0x080031ec
 800064c:	080031f0 	.word	0x080031f0
 8000650:	080031f4 	.word	0x080031f4
 8000654:	080031f8 	.word	0x080031f8

08000658 <checkPCH>:




//checks if the last 6 bits in the buffer are ready?
uint8_t checkPCH(){
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

	if(uart_buffer[read_ptr] == 'P' && uart_buffer[read_ptr+1] == 'C' && uart_buffer[read_ptr+2] == 'H'){
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <checkPCH+0x74>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <checkPCH+0x78>)
 8000666:	5c9b      	ldrb	r3, [r3, r2]
 8000668:	2b50      	cmp	r3, #80	; 0x50
 800066a:	d129      	bne.n	80006c0 <checkPCH+0x68>
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <checkPCH+0x74>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3301      	adds	r3, #1
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <checkPCH+0x78>)
 8000676:	5cd3      	ldrb	r3, [r2, r3]
 8000678:	2b43      	cmp	r3, #67	; 0x43
 800067a:	d121      	bne.n	80006c0 <checkPCH+0x68>
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <checkPCH+0x74>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3302      	adds	r3, #2
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <checkPCH+0x78>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	2b48      	cmp	r3, #72	; 0x48
 800068a:	d119      	bne.n	80006c0 <checkPCH+0x68>
		read_ptr +=3;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <checkPCH+0x74>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	3303      	adds	r3, #3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <checkPCH+0x74>)
 8000698:	701a      	strb	r2, [r3, #0]
		read_ptr %=BUFFER_SIZE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <checkPCH+0x74>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <checkPCH+0x7c>)
 80006a2:	fba2 1203 	umull	r1, r2, r2, r3
 80006a6:	0952      	lsrs	r2, r2, #5
 80006a8:	2164      	movs	r1, #100	; 0x64
 80006aa:	fb01 f202 	mul.w	r2, r1, r2
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <checkPCH+0x74>)
 80006b4:	701a      	strb	r2, [r3, #0]
		PCH_flag =1;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <checkPCH+0x80>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
		return 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	e000      	b.n	80006c2 <checkPCH+0x6a>
	}else{return 0;}
 80006c0:	2300      	movs	r3, #0

}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	200000e4 	.word	0x200000e4
 80006d0:	20000080 	.word	0x20000080
 80006d4:	51eb851f 	.word	0x51eb851f
 80006d8:	2000007e 	.word	0x2000007e

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fadf 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f8b5 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f94b 	bl	8000984 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ee:	f000 f91f 	bl	8000930 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	494c      	ldr	r1, [pc, #304]	; (8000828 <main+0x14c>)
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <main+0x150>)
 80006f8:	f001 fd83 	bl	8002202 <HAL_UART_Receive_IT>
  	buffer_index =0;
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <main+0x154>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
  {
	   // HAL_Delay(1000);
	  uint8_t t_code[24];
	  uint8_t t_code_index;
	  //wait for handshake until handshake received
	  while(!PCH_flag){
 8000702:	e001      	b.n	8000708 <main+0x2c>
		  checkPCH();
 8000704:	f7ff ffa8 	bl	8000658 <checkPCH>
	  while(!PCH_flag){
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <main+0x158>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <main+0x28>
	  }

	  HAL_UART_Transmit(&huart2, MCUHANDSHAKE, 5, 10);
 8000710:	230a      	movs	r3, #10
 8000712:	2205      	movs	r2, #5
 8000714:	4948      	ldr	r1, [pc, #288]	; (8000838 <main+0x15c>)
 8000716:	4845      	ldr	r0, [pc, #276]	; (800082c <main+0x150>)
 8000718:	f001 fce1 	bl	80020de <HAL_UART_Transmit>
	  //after handshake, send mcu handshake until first part of command received

	  //send ready_for_new_command
	  HAL_UART_Transmit(&huart2, ready_for_new_command, 5, 10);
 800071c:	230a      	movs	r3, #10
 800071e:	2205      	movs	r2, #5
 8000720:	4946      	ldr	r1, [pc, #280]	; (800083c <main+0x160>)
 8000722:	4842      	ldr	r0, [pc, #264]	; (800082c <main+0x150>)
 8000724:	f001 fcdb 	bl	80020de <HAL_UART_Transmit>
	  while(!END_flag){
 8000728:	e073      	b.n	8000812 <main+0x136>
		  if(read_ptr !=write_ptr){
 800072a:	4b45      	ldr	r3, [pc, #276]	; (8000840 <main+0x164>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <main+0x168>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	429a      	cmp	r2, r3
 8000738:	d06b      	beq.n	8000812 <main+0x136>
			  if(uart_buffer[read_ptr] == '\n' ||uart_buffer[read_ptr] == '\r'){
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <main+0x164>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <main+0x16c>)
 8000744:	5c9b      	ldrb	r3, [r3, r2]
 8000746:	2b0a      	cmp	r3, #10
 8000748:	d007      	beq.n	800075a <main+0x7e>
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <main+0x164>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <main+0x16c>)
 8000754:	5c9b      	ldrb	r3, [r3, r2]
 8000756:	2b0d      	cmp	r3, #13
 8000758:	d135      	bne.n	80007c6 <main+0xea>
				  read_ptr ++;
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <main+0x164>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b36      	ldr	r3, [pc, #216]	; (8000840 <main+0x164>)
 8000766:	701a      	strb	r2, [r3, #0]
				  read_ptr %= BUFFER_SIZE;
 8000768:	4b35      	ldr	r3, [pc, #212]	; (8000840 <main+0x164>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4a37      	ldr	r2, [pc, #220]	; (800084c <main+0x170>)
 8000770:	fba2 1203 	umull	r1, r2, r2, r3
 8000774:	0952      	lsrs	r2, r2, #5
 8000776:	2164      	movs	r1, #100	; 0x64
 8000778:	fb01 f202 	mul.w	r2, r1, r2
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <main+0x164>)
 8000782:	701a      	strb	r2, [r3, #0]
				  const char* t_code_str = (const char*)t_code;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	623b      	str	r3, [r7, #32]
				  uint8_t opcode = processCommand(t_code_str,t_code_index);
 8000788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800078c:	4619      	mov	r1, r3
 800078e:	6a38      	ldr	r0, [r7, #32]
 8000790:	f7ff feb6 	bl	8000500 <processCommand>
 8000794:	4603      	mov	r3, r0
 8000796:	77fb      	strb	r3, [r7, #31]
				  if( opcode == 11 ||opcode == 12){
 8000798:	7ffb      	ldrb	r3, [r7, #31]
 800079a:	2b0b      	cmp	r3, #11
 800079c:	d002      	beq.n	80007a4 <main+0xc8>
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	2b0c      	cmp	r3, #12
 80007a2:	d102      	bne.n	80007aa <main+0xce>
					  END_flag = 1;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <main+0x174>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
				  }
				  t_code_index =0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  HAL_Delay(500);
 80007b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b4:	f000 fae8 	bl	8000d88 <HAL_Delay>
				  HAL_UART_Transmit(&huart2, ready_for_new_command, 5, 10);
 80007b8:	230a      	movs	r3, #10
 80007ba:	2205      	movs	r2, #5
 80007bc:	491f      	ldr	r1, [pc, #124]	; (800083c <main+0x160>)
 80007be:	481b      	ldr	r0, [pc, #108]	; (800082c <main+0x150>)
 80007c0:	f001 fc8d 	bl	80020de <HAL_UART_Transmit>
			  if(uart_buffer[read_ptr] == '\n' ||uart_buffer[read_ptr] == '\r'){
 80007c4:	e025      	b.n	8000812 <main+0x136>
			  }else{

				  t_code[t_code_index] = uart_buffer[read_ptr];
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <main+0x164>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <main+0x16c>)
 80007d4:	5c52      	ldrb	r2, [r2, r1]
 80007d6:	3328      	adds	r3, #40	; 0x28
 80007d8:	443b      	add	r3, r7
 80007da:	f803 2c24 	strb.w	r2, [r3, #-36]
				  t_code_index++;
 80007de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  read_ptr ++;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <main+0x164>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <main+0x164>)
 80007f4:	701a      	strb	r2, [r3, #0]
				  read_ptr %= BUFFER_SIZE;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <main+0x164>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <main+0x170>)
 80007fe:	fba2 1203 	umull	r1, r2, r2, r3
 8000802:	0952      	lsrs	r2, r2, #5
 8000804:	2164      	movs	r1, #100	; 0x64
 8000806:	fb01 f202 	mul.w	r2, r1, r2
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <main+0x164>)
 8000810:	701a      	strb	r2, [r3, #0]
	  while(!END_flag){
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <main+0x174>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d087      	beq.n	800072a <main+0x4e>
		  //if there is a new byte, form it onto


	  }
	  //wait for next command
	  PCH_flag = 0;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <main+0x158>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	  END_flag = 0;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <main+0x174>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
  {
 8000826:	e76c      	b.n	8000702 <main+0x26>
 8000828:	2000007c 	.word	0x2000007c
 800082c:	20000038 	.word	0x20000038
 8000830:	2000007d 	.word	0x2000007d
 8000834:	2000007e 	.word	0x2000007e
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	200000e4 	.word	0x200000e4
 8000844:	200000e5 	.word	0x200000e5
 8000848:	20000080 	.word	0x20000080
 800084c:	51eb851f 	.word	0x51eb851f
 8000850:	2000007f 	.word	0x2000007f

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	; 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fc66 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <SystemClock_Config+0xd4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <SystemClock_Config+0xd4>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <SystemClock_Config+0xd4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <SystemClock_Config+0xd8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <SystemClock_Config+0xd8>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <SystemClock_Config+0xd8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c8:	2310      	movs	r3, #16
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f910 	bl	8001b08 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ee:	f000 f8eb 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fdb0 	bl	8001474 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800091a:	f000 f8d5 	bl	8000ac8 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART2_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000968:	f001 fb6c 	bl	8002044 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f8a9 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000038 	.word	0x20000038
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a10:	f000 fd16 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a2c:	f000 fb74 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a48:	f000 fb66 	bl	8001118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020800 	.word	0x40020800

08000a60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) { // Adjust this based on your UART instance
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_UART_RxCpltCallback+0x54>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d11d      	bne.n	8000aac <HAL_UART_RxCpltCallback+0x4c>
        uart_buffer[write_ptr] = rx_data; // Store the received data in the buffer
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_RxCpltCallback+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_RxCpltCallback+0x5c>)
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_UART_RxCpltCallback+0x60>)
 8000a7e:	5499      	strb	r1, [r3, r2]
        write_ptr = (write_ptr + 1) % BUFFER_SIZE; // Increment the write pointer and wrap around if needed
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_UART_RxCpltCallback+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_UART_RxCpltCallback+0x64>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1151      	asrs	r1, r2, #5
 8000a90:	17da      	asrs	r2, r3, #31
 8000a92:	1a8a      	subs	r2, r1, r2
 8000a94:	2164      	movs	r1, #100	; 0x64
 8000a96:	fb01 f202 	mul.w	r2, r1, r2
 8000a9a:	1a9a      	subs	r2, r3, r2
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_UART_RxCpltCallback+0x58>)
 8000aa0:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &rx_data, 1); // Start the next receive
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4905      	ldr	r1, [pc, #20]	; (8000abc <HAL_UART_RxCpltCallback+0x5c>)
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <HAL_UART_RxCpltCallback+0x54>)
 8000aa8:	f001 fbab 	bl	8002202 <HAL_UART_Receive_IT>
    }
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000038 	.word	0x20000038
 8000ab8:	200000e5 	.word	0x200000e5
 8000abc:	2000007c 	.word	0x2000007c
 8000ac0:	20000080 	.word	0x20000080
 8000ac4:	51eb851f 	.word	0x51eb851f

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fa2c 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_UART_MspInit+0x94>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d133      	bne.n	8000bae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_UART_MspInit+0x98>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b9a:	f000 fabd 	bl	8001118 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2026      	movs	r0, #38	; 0x26
 8000ba4:	f000 f9ef 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba8:	2026      	movs	r0, #38	; 0x26
 8000baa:	f000 fa08 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f89a 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f001 fb21 	bl	8002264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000038 	.word	0x20000038

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f002 fa73 	bl	8003168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fd2b 	bl	80006dc <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c94:	08003224 	.word	0x08003224
  ldr r2, =_sbss
 8000c98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c9c:	200000ec 	.word	0x200000ec

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f94f 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fefc 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f967 	bl	8000fda <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f92f 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000010 	.word	0x20000010
 8000d40:	20000018 	.word	0x20000018
 8000d44:	20000014 	.word	0x20000014

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000018 	.word	0x20000018
 8000d6c:	200000e8 	.word	0x200000e8

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000e8 	.word	0x200000e8

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000018 	.word	0x20000018

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff feb6 	bl	8000d70 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d008      	beq.n	8001024 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e052      	b.n	80010ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0216 	bic.w	r2, r2, #22
 8001032:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001042:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <HAL_DMA_Abort+0x62>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0208 	bic.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001074:	e013      	b.n	800109e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001076:	f7ff fe7b 	bl	8000d70 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b05      	cmp	r3, #5
 8001082:	d90c      	bls.n	800109e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e015      	b.n	80010ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e4      	bne.n	8001076 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d004      	beq.n	80010f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00c      	b.n	800110a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2205      	movs	r2, #5
 80010f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e165      	b.n	8001400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8154 	bne.w	80013fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ae 	beq.w	80013fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <HAL_GPIO_Init+0x300>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_GPIO_Init+0x304>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x308>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x310>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x20a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x206>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x202>
 8001316:	2306      	movs	r3, #6
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800131a:	2307      	movs	r3, #7
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x21c>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <HAL_GPIO_Init+0x304>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_GPIO_Init+0x324>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a31      	ldr	r2, [pc, #196]	; (800143c <HAL_GPIO_Init+0x324>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_GPIO_Init+0x324>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_GPIO_Init+0x324>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_GPIO_Init+0x324>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_GPIO_Init+0x324>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_GPIO_Init+0x324>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_GPIO_Init+0x324>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae96 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0cc      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d90c      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d044      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d119      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d003      	beq.n	8001532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	2b03      	cmp	r3, #3
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e067      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4934      	ldr	r1, [pc, #208]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fc04 	bl	8000d70 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fc00 	bl	8000d70 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e04f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d20c      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f855 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490a      	ldr	r1, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb64 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00
 8001630:	40023800 	.word	0x40023800
 8001634:	080031fc 	.word	0x080031fc
 8001638:	20000010 	.word	0x20000010
 800163c:	20000014 	.word	0x20000014

08001640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_GetHCLKFreq+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000010 	.word	0x20000010

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800165c:	f7ff fff0 	bl	8001640 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0a9b      	lsrs	r3, r3, #10
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK1Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	0800320c 	.word	0x0800320c

08001680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001684:	f7ff ffdc 	bl	8001640 <HAL_RCC_GetHCLKFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0b5b      	lsrs	r3, r3, #13
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4903      	ldr	r1, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	0800320c 	.word	0x0800320c

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b0ae      	sub	sp, #184	; 0xb8
 80016ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ce:	4bcb      	ldr	r3, [pc, #812]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	f200 8206 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x440>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	08001719 	.word	0x08001719
 80016e8:	08001ae9 	.word	0x08001ae9
 80016ec:	08001ae9 	.word	0x08001ae9
 80016f0:	08001ae9 	.word	0x08001ae9
 80016f4:	08001721 	.word	0x08001721
 80016f8:	08001ae9 	.word	0x08001ae9
 80016fc:	08001ae9 	.word	0x08001ae9
 8001700:	08001ae9 	.word	0x08001ae9
 8001704:	08001729 	.word	0x08001729
 8001708:	08001ae9 	.word	0x08001ae9
 800170c:	08001ae9 	.word	0x08001ae9
 8001710:	08001ae9 	.word	0x08001ae9
 8001714:	08001919 	.word	0x08001919
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4bb9      	ldr	r3, [pc, #740]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x358>)
 800171a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800171e:	e1e7      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4bb8      	ldr	r3, [pc, #736]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001726:	e1e3      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001728:	4bb4      	ldr	r3, [pc, #720]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001734:	4bb1      	ldr	r3, [pc, #708]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d071      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4bae      	ldr	r3, [pc, #696]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	2200      	movs	r2, #0
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800174c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001758:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001762:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	6439      	str	r1, [r7, #64]	; 0x40
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001798:	4649      	mov	r1, r9
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4641      	mov	r1, r8
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4641      	mov	r1, r8
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80017ac:	4649      	mov	r1, r9
 80017ae:	eb63 0301 	sbc.w	r3, r3, r1
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017c0:	4649      	mov	r1, r9
 80017c2:	00cb      	lsls	r3, r1, #3
 80017c4:	4641      	mov	r1, r8
 80017c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ca:	4641      	mov	r1, r8
 80017cc:	00ca      	lsls	r2, r1, #3
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	4622      	mov	r2, r4
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
 80017da:	462b      	mov	r3, r5
 80017dc:	460a      	mov	r2, r1
 80017de:	eb42 0303 	adc.w	r3, r2, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017f0:	4629      	mov	r1, r5
 80017f2:	024b      	lsls	r3, r1, #9
 80017f4:	4621      	mov	r1, r4
 80017f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fa:	4621      	mov	r1, r4
 80017fc:	024a      	lsls	r2, r1, #9
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001806:	2200      	movs	r2, #0
 8001808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800180c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001810:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001814:	f7fe fcf6 	bl	8000204 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4613      	mov	r3, r2
 800181e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001822:	e067      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001830:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	67bb      	str	r3, [r7, #120]	; 0x78
 800183e:	2300      	movs	r3, #0
 8001840:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001842:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0159      	lsls	r1, r3, #5
 8001854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001858:	0150      	lsls	r0, r2, #5
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4621      	mov	r1, r4
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	62b9      	str	r1, [r7, #40]	; 0x28
 8001864:	4629      	mov	r1, r5
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001878:	4649      	mov	r1, r9
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4641      	mov	r1, r8
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4641      	mov	r1, r8
 8001888:	ebb2 0a01 	subs.w	sl, r2, r1
 800188c:	4649      	mov	r1, r9
 800188e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800189e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018a6:	4692      	mov	sl, r2
 80018a8:	469b      	mov	fp, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	eb1a 0303 	adds.w	r3, sl, r3
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	462b      	mov	r3, r5
 80018b4:	eb4b 0303 	adc.w	r3, fp, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018c6:	4629      	mov	r1, r5
 80018c8:	028b      	lsls	r3, r1, #10
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d0:	4621      	mov	r1, r4
 80018d2:	028a      	lsls	r2, r1, #10
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018dc:	2200      	movs	r2, #0
 80018de:	673b      	str	r3, [r7, #112]	; 0x70
 80018e0:	677a      	str	r2, [r7, #116]	; 0x74
 80018e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018e6:	f7fe fc8d 	bl	8000204 <__aeabi_uldivmod>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4613      	mov	r3, r2
 80018f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800190a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001916:	e0eb      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d06b      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	2200      	movs	r2, #0
 8001938:	66bb      	str	r3, [r7, #104]	; 0x68
 800193a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800193c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001942:	663b      	str	r3, [r7, #96]	; 0x60
 8001944:	2300      	movs	r3, #0
 8001946:	667b      	str	r3, [r7, #100]	; 0x64
 8001948:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800194c:	4622      	mov	r2, r4
 800194e:	462b      	mov	r3, r5
 8001950:	f04f 0000 	mov.w	r0, #0
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	0159      	lsls	r1, r3, #5
 800195a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195e:	0150      	lsls	r0, r2, #5
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4621      	mov	r1, r4
 8001966:	1a51      	subs	r1, r2, r1
 8001968:	61b9      	str	r1, [r7, #24]
 800196a:	4629      	mov	r1, r5
 800196c:	eb63 0301 	sbc.w	r3, r3, r1
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800197e:	4659      	mov	r1, fp
 8001980:	018b      	lsls	r3, r1, #6
 8001982:	4651      	mov	r1, sl
 8001984:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001988:	4651      	mov	r1, sl
 800198a:	018a      	lsls	r2, r1, #6
 800198c:	4651      	mov	r1, sl
 800198e:	ebb2 0801 	subs.w	r8, r2, r1
 8001992:	4659      	mov	r1, fp
 8001994:	eb63 0901 	sbc.w	r9, r3, r1
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ac:	4690      	mov	r8, r2
 80019ae:	4699      	mov	r9, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	eb18 0303 	adds.w	r3, r8, r3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	462b      	mov	r3, r5
 80019ba:	eb49 0303 	adc.w	r3, r9, r3
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019cc:	4629      	mov	r1, r5
 80019ce:	024b      	lsls	r3, r1, #9
 80019d0:	4621      	mov	r1, r4
 80019d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d6:	4621      	mov	r1, r4
 80019d8:	024a      	lsls	r2, r1, #9
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e2:	2200      	movs	r2, #0
 80019e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80019e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019ec:	f7fe fc0a 	bl	8000204 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019fa:	e065      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x420>
 80019fc:	40023800 	.word	0x40023800
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	4611      	mov	r1, r2
 8001a14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a18:	653b      	str	r3, [r7, #80]	; 0x50
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a22:	4642      	mov	r2, r8
 8001a24:	464b      	mov	r3, r9
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	4649      	mov	r1, r9
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a54:	4659      	mov	r1, fp
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4651      	mov	r1, sl
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4651      	mov	r1, sl
 8001a64:	1a54      	subs	r4, r2, r1
 8001a66:	4659      	mov	r1, fp
 8001a68:	eb63 0501 	sbc.w	r5, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ab4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ab6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001aba:	f7fe fba3 	bl	8000204 <__aeabi_uldivmod>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0f1b      	lsrs	r3, r3, #28
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ae6:	e003      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	37b8      	adds	r7, #184	; 0xb8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400

08001b08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e28d      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8083 	beq.w	8001c2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b28:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d019      	beq.n	8001b68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b34:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b40:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4c:	d00c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	4b84      	ldr	r3, [pc, #528]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05b      	beq.n	8001c2c <HAL_RCC_OscConfig+0x124>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d157      	bne.n	8001c2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e25a      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x90>
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7b      	ldr	r2, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xcc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xb4>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xcc>
 8001bbc:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6b      	ldr	r2, [pc, #428]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8c8 	bl	8000d70 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f8c4 	bl	8000d70 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e21f      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xdc>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f8b4 	bl	8000d70 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff f8b0 	bl	8000d70 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e20b      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x104>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06f      	beq.n	8001d1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d017      	beq.n	8001c76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x186>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1d3      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4937      	ldr	r1, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x278>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f85d 	bl	8000d70 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff f859 	bl	8000d70 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1b4      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4925      	ldr	r1, [pc, #148]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x278>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f83c 	bl	8000d70 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f838 	bl	8000d70 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e193      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d036      	beq.n	8001d94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f81c 	bl	8000d70 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f818 	bl	8000d70 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e173      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x234>
 8001d5a:	e01b      	b.n	8001d94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff f805 	bl	8000d70 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	e00e      	b.n	8001d88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff f801 	bl	8000d70 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d907      	bls.n	8001d88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e15c      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ea      	bne.n	8001d6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8097 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <HAL_RCC_OscConfig+0x4b0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4b0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4b0>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7fe ffc1 	bl	8000d70 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe ffbd 	bl	8000d70 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e118      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b6c      	ldr	r3, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4b0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x31e>
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x358>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x340>
 8001e2e:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0x358>
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a59      	ldr	r2, [pc, #356]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7fe ff82 	bl	8000d70 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe ff7e 	bl	8000d70 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0d7      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ee      	beq.n	8001e70 <HAL_RCC_OscConfig+0x368>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ff6c 	bl	8000d70 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ff68 	bl	8000d70 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0c1      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80ad 	beq.w	8002034 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eda:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d060      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d145      	bne.n	8001f7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4b4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff3c 	bl	8000d70 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe ff38 	bl	8000d70 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e093      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	019b      	lsls	r3, r3, #6
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	071b      	lsls	r3, r3, #28
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x4b4>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe ff0d 	bl	8000d70 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe ff09 	bl	8000d70 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e064      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x452>
 8001f78:	e05c      	b.n	8002034 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x4b4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe fef6 	bl	8000d70 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fef2 	bl	8000d70 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e04d      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x480>
 8001fa6:	e045      	b.n	8002034 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e040      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_RCC_OscConfig+0x538>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d030      	beq.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d129      	bne.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d122      	bne.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d119      	bne.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d10f      	bne.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d107      	bne.n	8002030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e03f      	b.n	80020d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fd5a 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fddf 	bl	8002c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800209c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08a      	sub	sp, #40	; 0x28
 80020e2:	af02      	add	r7, sp, #8
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d17c      	bne.n	80021f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_UART_Transmit+0x2c>
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e075      	b.n	80021fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_UART_Transmit+0x3e>
 8002118:	2302      	movs	r3, #2
 800211a:	e06e      	b.n	80021fa <HAL_UART_Transmit+0x11c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2221      	movs	r2, #33	; 0x21
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002132:	f7fe fe1d 	bl	8000d70 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	88fa      	ldrh	r2, [r7, #6]
 8002142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214c:	d108      	bne.n	8002160 <HAL_UART_Transmit+0x82>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e003      	b.n	8002168 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002170:	e02a      	b.n	80021c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fb1f 	bl	80027c0 <UART_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e036      	b.n	80021fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3302      	adds	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e007      	b.n	80021ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1cf      	bne.n	8002172 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 faef 	bl	80027c0 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e006      	b.n	80021fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	4613      	mov	r3, r2
 800220e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b20      	cmp	r3, #32
 800221a:	d11d      	bne.n	8002258 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_Receive_IT+0x26>
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e016      	b.n	800225a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_UART_Receive_IT+0x38>
 8002236:	2302      	movs	r3, #2
 8002238:	e00f      	b.n	800225a <HAL_UART_Receive_IT+0x58>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	461a      	mov	r2, r3
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fb24 	bl	800289c <UART_Start_Receive_IT>
 8002254:	4603      	mov	r3, r0
 8002256:	e000      	b.n	800225a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0ba      	sub	sp, #232	; 0xe8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_UART_IRQHandler+0x66>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fc07 	bl	8002ad6 <UART_Receive_IT>
      return;
 80022c8:	e256      	b.n	8002778 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80de 	beq.w	8002490 <HAL_UART_IRQHandler+0x22c>
 80022d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80d1 	beq.w	8002490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0xae>
 80022fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_UART_IRQHandler+0xd2>
 800231e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_UART_IRQHandler+0xf6>
 8002342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d011      	beq.n	800238a <HAL_UART_IRQHandler+0x126>
 8002366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0208 	orr.w	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 81ed 	beq.w	800276e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_UART_IRQHandler+0x14e>
 80023a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb92 	bl	8002ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <HAL_UART_IRQHandler+0x17a>
 80023d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d04f      	beq.n	800247e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa9a 	bl	8002918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d141      	bne.n	8002476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3314      	adds	r3, #20
 80023f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800240c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3314      	adds	r3, #20
 800241a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800241e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800242a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1d9      	bne.n	80023f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d013      	beq.n	800246e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	4a7d      	ldr	r2, [pc, #500]	; (8002640 <HAL_UART_IRQHandler+0x3dc>)
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fe3d 	bl	80010d2 <HAL_DMA_Abort_IT>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	e00e      	b.n	800248c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f990 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002474:	e00a      	b.n	800248c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f98c 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247c:	e006      	b.n	800248c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f988 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800248a:	e170      	b.n	800276e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	bf00      	nop
    return;
 800248e:	e16e      	b.n	800276e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 814a 	bne.w	800272e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8143 	beq.w	800272e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 813c 	beq.w	800272e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	f040 80b4 	bne.w	8002644 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8140 	beq.w	8002772 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024fa:	429a      	cmp	r2, r3
 80024fc:	f080 8139 	bcs.w	8002772 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002506:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	f000 8088 	beq.w	8002626 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800254e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800255a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1d9      	bne.n	8002516 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3314      	adds	r3, #20
 8002582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800258a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800258e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002592:	e841 2300 	strex	r3, r2, [r1]
 8002596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e1      	bne.n	8002562 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3314      	adds	r3, #20
 80025a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3314      	adds	r3, #20
 80025be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ca:	e841 2300 	strex	r3, r2, [r1]
 80025ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e3      	bne.n	800259e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ee:	e853 3f00 	ldrex	r3, [r3]
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f6:	f023 0310 	bic.w	r3, r3, #16
 80025fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002608:	65ba      	str	r2, [r7, #88]	; 0x58
 800260a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800260e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e3      	bne.n	80025e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fce6 	bl	8000ff2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800262e:	b29b      	uxth	r3, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	b29b      	uxth	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8b6 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800263c:	e099      	b.n	8002772 <HAL_UART_IRQHandler+0x50e>
 800263e:	bf00      	nop
 8002640:	080029df 	.word	0x080029df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264c:	b29b      	uxth	r3, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 808b 	beq.w	8002776 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8086 	beq.w	8002776 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800268e:	647a      	str	r2, [r7, #68]	; 0x44
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e3      	bne.n	800266a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	623b      	str	r3, [r7, #32]
   return(result);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3314      	adds	r3, #20
 80026c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026c6:	633a      	str	r2, [r7, #48]	; 0x30
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0310 	bic.w	r3, r3, #16
 80026fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800270c:	61fa      	str	r2, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	e841 2300 	strex	r3, r2, [r1]
 8002718:	617b      	str	r3, [r7, #20]
   return(result);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e3      	bne.n	80026e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f83e 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800272c:	e023      	b.n	8002776 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_UART_IRQHandler+0x4ea>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f95d 	bl	8002a06 <UART_Transmit_IT>
    return;
 800274c:	e014      	b.n	8002778 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <HAL_UART_IRQHandler+0x514>
 800275a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f99d 	bl	8002aa6 <UART_EndTransmit_IT>
    return;
 800276c:	e004      	b.n	8002778 <HAL_UART_IRQHandler+0x514>
    return;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <HAL_UART_IRQHandler+0x514>
      return;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <HAL_UART_IRQHandler+0x514>
      return;
 8002776:	bf00      	nop
  }
}
 8002778:	37e8      	adds	r7, #232	; 0xe8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop

08002780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b090      	sub	sp, #64	; 0x40
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d0:	e050      	b.n	8002874 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d04c      	beq.n	8002874 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027e0:	f7fe fac6 	bl	8000d70 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d241      	bcs.n	8002874 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	e853 3f00 	ldrex	r3, [r3]
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002810:	637a      	str	r2, [r7, #52]	; 0x34
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002818:	e841 2300 	strex	r3, r2, [r1]
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e5      	bne.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	613b      	str	r3, [r7, #16]
   return(result);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002844:	623a      	str	r2, [r7, #32]
 8002846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002848:	69f9      	ldr	r1, [r7, #28]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	61bb      	str	r3, [r7, #24]
   return(result);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e5      	bne.n	8002824 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e00f      	b.n	8002894 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4013      	ands	r3, r2
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	429a      	cmp	r2, r3
 8002890:	d09f      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3740      	adds	r7, #64	; 0x40
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2222      	movs	r2, #34	; 0x22
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b095      	sub	sp, #84	; 0x54
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	e853 3f00 	ldrex	r3, [r3]
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002940:	643a      	str	r2, [r7, #64]	; 0x40
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e5      	bne.n	8002920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	61fb      	str	r3, [r7, #28]
   return(result);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3314      	adds	r3, #20
 8002972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e5      	bne.n	8002954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	2b01      	cmp	r3, #1
 800298e:	d119      	bne.n	80029c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	60bb      	str	r3, [r7, #8]
   return(result);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0310 	bic.w	r3, r3, #16
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b0:	61ba      	str	r2, [r7, #24]
 80029b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	613b      	str	r3, [r7, #16]
   return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029d2:	bf00      	nop
 80029d4:	3754      	adds	r7, #84	; 0x54
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fecb 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b21      	cmp	r3, #33	; 0x21
 8002a18:	d13e      	bne.n	8002a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d114      	bne.n	8002a4e <UART_Transmit_IT+0x48>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d110      	bne.n	8002a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	1c9a      	adds	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	621a      	str	r2, [r3, #32]
 8002a4c:	e008      	b.n	8002a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6211      	str	r1, [r2, #32]
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fe5a 	bl	8002780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b08c      	sub	sp, #48	; 0x30
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b22      	cmp	r3, #34	; 0x22
 8002ae8:	f040 80ab 	bne.w	8002c42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d117      	bne.n	8002b26 <UART_Receive_IT+0x50>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	1c9a      	adds	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
 8002b24:	e026      	b.n	8002b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d007      	beq.n	8002b4a <UART_Receive_IT+0x74>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <UART_Receive_IT+0x82>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e008      	b.n	8002b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4619      	mov	r1, r3
 8002b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d15a      	bne.n	8002c3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d135      	bne.n	8002c34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f023 0310 	bic.w	r3, r3, #16
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	623a      	str	r2, [r7, #32]
 8002bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	69f9      	ldr	r1, [r7, #28]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e5      	bne.n	8002bce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d10a      	bne.n	8002c26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fdbb 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
 8002c32:	e002      	b.n	8002c3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd ff13 	bl	8000a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e002      	b.n	8002c44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3730      	adds	r7, #48	; 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b0c0      	sub	sp, #256	; 0x100
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	68d9      	ldr	r1, [r3, #12]
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	ea40 0301 	orr.w	r3, r0, r1
 8002c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca4:	f021 010c 	bic.w	r1, r1, #12
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	6999      	ldr	r1, [r3, #24]
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	ea40 0301 	orr.w	r3, r0, r1
 8002cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <UART_SetConfig+0x2cc>)
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <UART_SetConfig+0xa0>
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <UART_SetConfig+0x2d0>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d104      	bne.n	8002cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7fe fcc8 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cf4:	e003      	b.n	8002cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7fe fcaf 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 8002cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	f040 810c 	bne.w	8002f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d26:	415b      	adcs	r3, r3
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d2e:	4621      	mov	r1, r4
 8002d30:	eb12 0801 	adds.w	r8, r2, r1
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb43 0901 	adc.w	r9, r3, r1
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	eb18 0303 	adds.w	r3, r8, r3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	eb49 0303 	adc.w	r3, r9, r3
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	18db      	adds	r3, r3, r3
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d80:	4613      	mov	r3, r2
 8002d82:	eb42 0303 	adc.w	r3, r2, r3
 8002d86:	657b      	str	r3, [r7, #84]	; 0x54
 8002d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d90:	f7fd fa38 	bl	8000204 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dca:	4649      	mov	r1, r9
 8002dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de4:	4692      	mov	sl, r2
 8002de6:	469b      	mov	fp, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	eb1a 0303 	adds.w	r3, sl, r3
 8002dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb4b 0303 	adc.w	r3, fp, r3
 8002df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	643b      	str	r3, [r7, #64]	; 0x40
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e26:	f7fd f9ed 	bl	8000204 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	; 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e54:	441c      	add	r4, r3
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e70:	415b      	adcs	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e78:	4641      	mov	r1, r8
 8002e7a:	1851      	adds	r1, r2, r1
 8002e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e7e:	4649      	mov	r1, r9
 8002e80:	414b      	adcs	r3, r1
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e90:	4659      	mov	r1, fp
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eac:	464b      	mov	r3, r9
 8002eae:	460a      	mov	r2, r1
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ee2:	f7fd f98f 	bl	8000204 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	; 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	; 0x32
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	f003 0207 	and.w	r2, r3, #7
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4422      	add	r2, r4
 8002f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f14:	e106      	b.n	8003124 <UART_SetConfig+0x4d8>
 8002f16:	bf00      	nop
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	6239      	str	r1, [r7, #32]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1854      	adds	r4, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb43 0501 	adc.w	r5, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	00eb      	lsls	r3, r5, #3
 8002f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5e:	00e2      	lsls	r2, r4, #3
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	18e3      	adds	r3, r4, r3
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	eb45 0303 	adc.w	r3, r5, r3
 8002f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f92:	4629      	mov	r1, r5
 8002f94:	008b      	lsls	r3, r1, #2
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	008a      	lsls	r2, r1, #2
 8002fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fa4:	f7fd f92e 	bl	8000204 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b60      	ldr	r3, [pc, #384]	; (8003130 <UART_SetConfig+0x4e4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	61b9      	str	r1, [r7, #24]
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6139      	str	r1, [r7, #16]
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	67bb      	str	r3, [r7, #120]	; 0x78
 8003022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003030:	4649      	mov	r1, r9
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	4641      	mov	r1, r8
 8003036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303a:	4641      	mov	r1, r8
 800303c:	008a      	lsls	r2, r1, #2
 800303e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003042:	f7fd f8df 	bl	8000204 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2301 	umull	r2, r3, r3, r1
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2264      	movs	r2, #100	; 0x64
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	; 0x32
 8003060:	4a33      	ldr	r2, [pc, #204]	; (8003130 <UART_SetConfig+0x4e4>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	673b      	str	r3, [r7, #112]	; 0x70
 8003076:	677a      	str	r2, [r7, #116]	; 0x74
 8003078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	415b      	adcs	r3, r3
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030be:	464b      	mov	r3, r9
 80030c0:	460a      	mov	r2, r1
 80030c2:	eb42 0303 	adc.w	r3, r2, r3
 80030c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
 80030d2:	667a      	str	r2, [r7, #100]	; 0x64
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030f2:	f7fd f887 	bl	8000204 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <memset>:
 8003134:	4402      	add	r2, r0
 8003136:	4603      	mov	r3, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <strncmp>:
 8003144:	b510      	push	{r4, lr}
 8003146:	b16a      	cbz	r2, 8003164 <strncmp+0x20>
 8003148:	3901      	subs	r1, #1
 800314a:	1884      	adds	r4, r0, r2
 800314c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003150:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003154:	429a      	cmp	r2, r3
 8003156:	d103      	bne.n	8003160 <strncmp+0x1c>
 8003158:	42a0      	cmp	r0, r4
 800315a:	d001      	beq.n	8003160 <strncmp+0x1c>
 800315c:	2a00      	cmp	r2, #0
 800315e:	d1f5      	bne.n	800314c <strncmp+0x8>
 8003160:	1ad0      	subs	r0, r2, r3
 8003162:	bd10      	pop	{r4, pc}
 8003164:	4610      	mov	r0, r2
 8003166:	e7fc      	b.n	8003162 <strncmp+0x1e>

08003168 <__libc_init_array>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4d0d      	ldr	r5, [pc, #52]	; (80031a0 <__libc_init_array+0x38>)
 800316c:	4c0d      	ldr	r4, [pc, #52]	; (80031a4 <__libc_init_array+0x3c>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	2600      	movs	r6, #0
 8003174:	42a6      	cmp	r6, r4
 8003176:	d109      	bne.n	800318c <__libc_init_array+0x24>
 8003178:	4d0b      	ldr	r5, [pc, #44]	; (80031a8 <__libc_init_array+0x40>)
 800317a:	4c0c      	ldr	r4, [pc, #48]	; (80031ac <__libc_init_array+0x44>)
 800317c:	f000 f818 	bl	80031b0 <_init>
 8003180:	1b64      	subs	r4, r4, r5
 8003182:	10a4      	asrs	r4, r4, #2
 8003184:	2600      	movs	r6, #0
 8003186:	42a6      	cmp	r6, r4
 8003188:	d105      	bne.n	8003196 <__libc_init_array+0x2e>
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003190:	4798      	blx	r3
 8003192:	3601      	adds	r6, #1
 8003194:	e7ee      	b.n	8003174 <__libc_init_array+0xc>
 8003196:	f855 3b04 	ldr.w	r3, [r5], #4
 800319a:	4798      	blx	r3
 800319c:	3601      	adds	r6, #1
 800319e:	e7f2      	b.n	8003186 <__libc_init_array+0x1e>
 80031a0:	0800321c 	.word	0x0800321c
 80031a4:	0800321c 	.word	0x0800321c
 80031a8:	0800321c 	.word	0x0800321c
 80031ac:	08003220 	.word	0x08003220

080031b0 <_init>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr

080031bc <_fini>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	bf00      	nop
 80031c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c2:	bc08      	pop	{r3}
 80031c4:	469e      	mov	lr, r3
 80031c6:	4770      	bx	lr
