
pnp_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d0  080042d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080042d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000006c  08004344  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004344  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000931c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a75  00000000  00000000  000293fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005db  00000000  00000000  0002b620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021314  00000000  00000000  0002bbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ada8  00000000  00000000  0004cf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8477  00000000  00000000  00057cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f4  00000000  00000000  00120130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00122624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040ec 	.word	0x080040ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080040ec 	.word	0x080040ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <checkForStart>:
#include <stdio.h>
#include <stdint.h>
#include "stm32f4xx_hal.h" // Replace 'xxx' with your STM32 family


uint8_t checkForStart(const char* t_code_str){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	 if (strncmp(t_code_str, "M12", 3) == 0) {
 80005c4:	2203      	movs	r2, #3
 80005c6:	4907      	ldr	r1, [pc, #28]	; (80005e4 <checkForStart+0x28>)
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f002 ff77 	bl	80034bc <strncmp>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <checkForStart+0x1c>
	        // Handle M12 code
	    	//M12	0xc	Start of program	M12	No parameters. Indicates that the program is started
	        return 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	e000      	b.n	80005da <checkForStart+0x1e>
	    }else{
	    	return 0;
 80005d8:	2300      	movs	r3, #0
	    }
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08004104 	.word	0x08004104

080005e8 <SCRAM>:

uint8_t SCRAM(){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	return 1;
 80005ec:	2301      	movs	r3, #1
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <move_to_xyzr>:

uint8_t move_to_xyzr(uint16_t x, uint16_t y, uint16_t z,uint16_t r){
 80005f8:	b490      	push	{r4, r7}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4604      	mov	r4, r0
 8000600:	4608      	mov	r0, r1
 8000602:	4611      	mov	r1, r2
 8000604:	461a      	mov	r2, r3
 8000606:	4623      	mov	r3, r4
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	4603      	mov	r3, r0
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	807b      	strh	r3, [r7, #2]
 8000612:	4613      	mov	r3, r2
 8000614:	803b      	strh	r3, [r7, #0]
	return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bc90      	pop	{r4, r7}
 8000620:	4770      	bx	lr

08000622 <vacuum_on>:

uint8_t vacuum_on(){
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
	return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <vacuum_off>:

uint8_t vacuum_off(){
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
	return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <reel_feeder>:

uint8_t reel_feeder(uint8_t feeder_num){
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	4603      	mov	r3, r0
 800064a:	71fb      	strb	r3, [r7, #7]
	return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <check_feeder_load>:

uint8_t check_feeder_load(uint8_t feeder_num){
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
	return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <check_feeder_fed>:

uint8_t check_feeder_fed(uint8_t feeder_num){
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
	return 1;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <calibrate>:

uint8_t calibrate(){
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
	return 1;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <processCommand>:

uint8_t processCommand(const char* t_code_str){
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
    // Check if t_code_str is not NULL to avoid potential issues
    if (t_code_str == NULL) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <processCommand+0x12>
        return 0; // Indicate failure or error as needed
 80006aa:	2300      	movs	r3, #0
 80006ac:	e0f4      	b.n	8000898 <processCommand+0x1fc>
    }

    if (strncmp(t_code_str, "T00", 3) == 0) {
 80006ae:	2203      	movs	r2, #3
 80006b0:	497b      	ldr	r1, [pc, #492]	; (80008a0 <processCommand+0x204>)
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f002 ff02 	bl	80034bc <strncmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11e      	bne.n	80006fc <processCommand+0x60>
        // Handle T00 code
    	//Move to coordinate	T00 X123 Y456 Z789 R90
    	int16_t x, y, z, r;
    	sscanf(t_code_str, "T%*2d X%hd Y%hd Z%hd R%hd", &x, &y, &z, &r);
 80006be:	f107 011c 	add.w	r1, r7, #28
 80006c2:	f107 021e 	add.w	r2, r7, #30
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	f107 031a 	add.w	r3, r7, #26
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	4973      	ldr	r1, [pc, #460]	; (80008a4 <processCommand+0x208>)
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f002 feba 	bl	8003450 <siscanf>
    	return (move_to_xyzr(x,y,z,r));
 80006dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006e0:	b298      	uxth	r0, r3
 80006e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006e6:	b299      	uxth	r1, r3
 80006e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	f7ff ff80 	bl	80005f8 <move_to_xyzr>
 80006f8:	4603      	mov	r3, r0
 80006fa:	e0cd      	b.n	8000898 <processCommand+0x1fc>


    } else if (strncmp(t_code_str, "T01", 3) == 0) {
 80006fc:	2203      	movs	r2, #3
 80006fe:	496a      	ldr	r1, [pc, #424]	; (80008a8 <processCommand+0x20c>)
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f002 fedb 	bl	80034bc <strncmp>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d11e      	bne.n	800074a <processCommand+0xae>
        // Handle T01 code
    	//Move certain distance	T01 X0 Y0 Z-15 R0	The head moves down 15 units
    	int16_t x, y, z, r;
		sscanf(t_code_str, "T%*2d X%hd Y%hd Z%hd R%hd", &x, &y, &z, &r);
 800070c:	f107 0114 	add.w	r1, r7, #20
 8000710:	f107 0216 	add.w	r2, r7, #22
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	f107 0312 	add.w	r3, r7, #18
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	460b      	mov	r3, r1
 8000722:	4960      	ldr	r1, [pc, #384]	; (80008a4 <processCommand+0x208>)
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f002 fe93 	bl	8003450 <siscanf>
		return (move_to_xyzr(x,y,z,r));
 800072a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800072e:	b298      	uxth	r0, r3
 8000730:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000734:	b299      	uxth	r1, r3
 8000736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800073a:	b29a      	uxth	r2, r3
 800073c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000740:	b29b      	uxth	r3, r3
 8000742:	f7ff ff59 	bl	80005f8 <move_to_xyzr>
 8000746:	4603      	mov	r3, r0
 8000748:	e0a6      	b.n	8000898 <processCommand+0x1fc>

    } else if (strncmp(t_code_str, "T02", 3) == 0) {
 800074a:	2203      	movs	r2, #3
 800074c:	4957      	ldr	r1, [pc, #348]	; (80008ac <processCommand+0x210>)
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f002 feb4 	bl	80034bc <strncmp>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d107      	bne.n	800076a <processCommand+0xce>
        // Handle T02 code
    	//Go to origin (0, 0, 0, 0)	T02	No parameters
    	return (move_to_xyzr(0,0,0,0));
 800075a:	2300      	movs	r3, #0
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff49 	bl	80005f8 <move_to_xyzr>
 8000766:	4603      	mov	r3, r0
 8000768:	e096      	b.n	8000898 <processCommand+0x1fc>

    } else if (strncmp(t_code_str, "M03", 3) == 0) {
 800076a:	2203      	movs	r2, #3
 800076c:	4950      	ldr	r1, [pc, #320]	; (80008b0 <processCommand+0x214>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f002 fea4 	bl	80034bc <strncmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <processCommand+0xe6>
        // Handle M03 code
    	//Turn on vacuum	M03	No parameters

        return vacuum_on();
 800077a:	f7ff ff52 	bl	8000622 <vacuum_on>
 800077e:	4603      	mov	r3, r0
 8000780:	e08a      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M04", 3) == 0) {
 8000782:	2203      	movs	r2, #3
 8000784:	494b      	ldr	r1, [pc, #300]	; (80008b4 <processCommand+0x218>)
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f002 fe98 	bl	80034bc <strncmp>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <processCommand+0xfe>
        // Handle M04 code
    	//Turn off vacuum	M04	No parameters
    	return vacuum_off();
 8000792:	f7ff ff4e 	bl	8000632 <vacuum_off>
 8000796:	4603      	mov	r3, r0
 8000798:	e07e      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M05", 3) == 0) {
 800079a:	2203      	movs	r2, #3
 800079c:	4946      	ldr	r1, [pc, #280]	; (80008b8 <processCommand+0x21c>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f002 fe8c 	bl	80034bc <strncmp>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10c      	bne.n	80007c4 <processCommand+0x128>
        // Handle M05 code
    	uint8_t reel;
    	//Feed reel	M05 P15 (read)	Feeds reel with part number 15
    	sscanf(t_code_str, "M05 P%hhu", &reel);
 80007aa:	f107 030f 	add.w	r3, r7, #15
 80007ae:	461a      	mov	r2, r3
 80007b0:	4942      	ldr	r1, [pc, #264]	; (80008bc <processCommand+0x220>)
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f002 fe4c 	bl	8003450 <siscanf>
    	return reel_feeder(reel);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff41 	bl	8000642 <reel_feeder>
 80007c0:	4603      	mov	r3, r0
 80007c2:	e069      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M06", 3) == 0) {
 80007c4:	2203      	movs	r2, #3
 80007c6:	493e      	ldr	r1, [pc, #248]	; (80008c0 <processCommand+0x224>)
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f002 fe77 	bl	80034bc <strncmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d110      	bne.n	80007f6 <processCommand+0x15a>
    	uint8_t reel;
    	sscanf(t_code_str, "M06 P%hhu", &reel);
 80007d4:	f107 030e 	add.w	r3, r7, #14
 80007d8:	461a      	mov	r2, r3
 80007da:	493a      	ldr	r1, [pc, #232]	; (80008c4 <processCommand+0x228>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f002 fe37 	bl	8003450 <siscanf>
    	while(!check_feeder_load(reel)){
 80007e2:	bf00      	nop
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff37 	bl	800065a <check_feeder_load>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <processCommand+0x148>
    		//wait
    	}

        // Handle M06 code
    	//Wait for reel	M06 P20 (read)	Waits until reel with part number 20 is loaded. Continues once it is loaded. If part already loaded, the it just continues
        return 7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	e050      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M07", 3) == 0) {
 80007f6:	2203      	movs	r2, #3
 80007f8:	4933      	ldr	r1, [pc, #204]	; (80008c8 <processCommand+0x22c>)
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f002 fe5e 	bl	80034bc <strncmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10c      	bne.n	8000820 <processCommand+0x184>
        // Handle M07 code
    	//Wait some time	M07 M550	Waits 550ms to continue
    	uint8_t time;
		sscanf(t_code_str, "M07 P%hhu", &time);
 8000806:	f107 030d 	add.w	r3, r7, #13
 800080a:	461a      	mov	r2, r3
 800080c:	492f      	ldr	r1, [pc, #188]	; (80008cc <processCommand+0x230>)
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f002 fe1e 	bl	8003450 <siscanf>
		HAL_Delay(time);
 8000814:	7b7b      	ldrb	r3, [r7, #13]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fc44 	bl	80010a4 <HAL_Delay>

        return 8;
 800081c:	2308      	movs	r3, #8
 800081e:	e03b      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M08", 3) == 0) {
 8000820:	2203      	movs	r2, #3
 8000822:	492b      	ldr	r1, [pc, #172]	; (80008d0 <processCommand+0x234>)
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f002 fe49 	bl	80034bc <strncmp>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d110      	bne.n	8000852 <processCommand+0x1b6>
    	uint8_t reel;
		sscanf(t_code_str, "M08 P%hhu", &reel);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	461a      	mov	r2, r3
 8000836:	4927      	ldr	r1, [pc, #156]	; (80008d4 <processCommand+0x238>)
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f002 fe09 	bl	8003450 <siscanf>
		while(!check_feeder_fed(reel)){
 800083e:	bf00      	nop
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff15 	bl	8000672 <check_feeder_fed>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f8      	beq.n	8000840 <processCommand+0x1a4>
		    		//wait
		    	}
        // Handle M08 code
    	//Wait for feed	M08 P17	Waits until reel with part 17 finishes feeding

        return 9;
 800084e:	2309      	movs	r3, #9
 8000850:	e022      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "T09", 3) == 0) {
 8000852:	2203      	movs	r2, #3
 8000854:	4920      	ldr	r1, [pc, #128]	; (80008d8 <processCommand+0x23c>)
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f002 fe30 	bl	80034bc <strncmp>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <processCommand+0x1ce>
        // Handle T09 code
    	//Calibrate	T09	No parameters. Will move in all directions until the limit switches are hit to determine the origin
    	calibrate();
 8000862:	f7ff ff12 	bl	800068a <calibrate>
        return 10;
 8000866:	230a      	movs	r3, #10
 8000868:	e016      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M10", 3) == 0) {
 800086a:	2203      	movs	r2, #3
 800086c:	491b      	ldr	r1, [pc, #108]	; (80008dc <processCommand+0x240>)
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f002 fe24 	bl	80034bc <strncmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <processCommand+0x1e2>
        // Handle M10 code
    	//M10	0xa	End of program	M10	No parameters. Indicates that the program is finished
        return 11;
 800087a:	230b      	movs	r3, #11
 800087c:	e00c      	b.n	8000898 <processCommand+0x1fc>
    } else if (strncmp(t_code_str, "M11", 3) == 0) {
 800087e:	2203      	movs	r2, #3
 8000880:	4917      	ldr	r1, [pc, #92]	; (80008e0 <processCommand+0x244>)
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f002 fe1a 	bl	80034bc <strncmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <processCommand+0x1fa>
        // Handle M11 code
    	//M11	0xb	Emergency stop	M11	No parameters. Shuts down power to the motors
    	SCRAM();
 800088e:	f7ff feab 	bl	80005e8 <SCRAM>
        return 12;
 8000892:	230c      	movs	r3, #12
 8000894:	e000      	b.n	8000898 <processCommand+0x1fc>
    } else {
        // Handle the case when t_code_str doesn't match any of the specified codes
        return 0; // Indicate failure or error as needed
 8000896:	2300      	movs	r3, #0
    }
}
 8000898:	4618      	mov	r0, r3
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08004108 	.word	0x08004108
 80008a4:	0800410c 	.word	0x0800410c
 80008a8:	08004128 	.word	0x08004128
 80008ac:	0800412c 	.word	0x0800412c
 80008b0:	08004130 	.word	0x08004130
 80008b4:	08004134 	.word	0x08004134
 80008b8:	08004138 	.word	0x08004138
 80008bc:	0800413c 	.word	0x0800413c
 80008c0:	08004148 	.word	0x08004148
 80008c4:	0800414c 	.word	0x0800414c
 80008c8:	08004158 	.word	0x08004158
 80008cc:	0800415c 	.word	0x0800415c
 80008d0:	08004168 	.word	0x08004168
 80008d4:	0800416c 	.word	0x0800416c
 80008d8:	08004178 	.word	0x08004178
 80008dc:	0800417c 	.word	0x0800417c
 80008e0:	08004180 	.word	0x08004180

080008e4 <checkPCH>:




//checks if the last 6 bits in the buffer are ready?
uint8_t checkPCH(){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

	if(uart_buffer[read_ptr] == 'P' && uart_buffer[read_ptr+1] == 'C' && uart_buffer[read_ptr+2] == 'H'){
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <checkPCH+0x74>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <checkPCH+0x78>)
 80008f2:	5c9b      	ldrb	r3, [r3, r2]
 80008f4:	2b50      	cmp	r3, #80	; 0x50
 80008f6:	d129      	bne.n	800094c <checkPCH+0x68>
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <checkPCH+0x74>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	3301      	adds	r3, #1
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <checkPCH+0x78>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	2b43      	cmp	r3, #67	; 0x43
 8000906:	d121      	bne.n	800094c <checkPCH+0x68>
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <checkPCH+0x74>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3302      	adds	r3, #2
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <checkPCH+0x78>)
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	2b48      	cmp	r3, #72	; 0x48
 8000916:	d119      	bne.n	800094c <checkPCH+0x68>
		read_ptr +=3;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <checkPCH+0x74>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3303      	adds	r3, #3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <checkPCH+0x74>)
 8000924:	701a      	strb	r2, [r3, #0]
		read_ptr %=BUFFER_SIZE;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <checkPCH+0x74>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <checkPCH+0x7c>)
 800092e:	fba2 1203 	umull	r1, r2, r2, r3
 8000932:	0952      	lsrs	r2, r2, #5
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	fb01 f202 	mul.w	r2, r1, r2
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <checkPCH+0x74>)
 8000940:	701a      	strb	r2, [r3, #0]
		PCH_flag =1;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <checkPCH+0x80>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
		return 1;
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <checkPCH+0x6a>
	}else{return 0;}
 800094c:	2300      	movs	r3, #0

}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	20000138 	.word	0x20000138
 800095c:	200000d4 	.word	0x200000d4
 8000960:	51eb851f 	.word	0x51eb851f
 8000964:	200000ce 	.word	0x200000ce

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fb27 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f8c7 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f000 f95d 	bl	8000c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800097a:	f000 f931 	bl	8000be0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	4954      	ldr	r1, [pc, #336]	; (8000ad4 <main+0x16c>)
 8000982:	4855      	ldr	r0, [pc, #340]	; (8000ad8 <main+0x170>)
 8000984:	f001 fdcb 	bl	800251e <HAL_UART_Receive_IT>
  	buffer_index =0;
 8000988:	4b54      	ldr	r3, [pc, #336]	; (8000adc <main+0x174>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
  {
	   // HAL_Delay(1000);
	  uint8_t t_code[24];
	  uint8_t t_code_index;
	  //wait for handshake until handshake received
	  while(!PCH_flag){
 800098e:	e001      	b.n	8000994 <main+0x2c>
		  checkPCH();
 8000990:	f7ff ffa8 	bl	80008e4 <checkPCH>
	  while(!PCH_flag){
 8000994:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <main+0x178>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <main+0x28>
	  }

	  HAL_UART_Transmit(&huart2, MCUHANDSHAKE, 5, 10);
 800099c:	230a      	movs	r3, #10
 800099e:	2205      	movs	r2, #5
 80009a0:	4950      	ldr	r1, [pc, #320]	; (8000ae4 <main+0x17c>)
 80009a2:	484d      	ldr	r0, [pc, #308]	; (8000ad8 <main+0x170>)
 80009a4:	f001 fd29 	bl	80023fa <HAL_UART_Transmit>
	  //after handshake, send mcu handshake until first part of command received

	  //send ready_for_new_command
	  HAL_UART_Transmit(&huart2, ready_for_new_command, 5, 10);
 80009a8:	230a      	movs	r3, #10
 80009aa:	2205      	movs	r2, #5
 80009ac:	494e      	ldr	r1, [pc, #312]	; (8000ae8 <main+0x180>)
 80009ae:	484a      	ldr	r0, [pc, #296]	; (8000ad8 <main+0x170>)
 80009b0:	f001 fd23 	bl	80023fa <HAL_UART_Transmit>
	  while(!END_flag){
 80009b4:	e07e      	b.n	8000ab4 <main+0x14c>
		  if(read_ptr !=write_ptr){
 80009b6:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <main+0x184>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <main+0x188>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d076      	beq.n	8000ab4 <main+0x14c>
			  if(uart_buffer[read_ptr] == '\n' ||uart_buffer[read_ptr] == '\r'){
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <main+0x184>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <main+0x18c>)
 80009d0:	5c9b      	ldrb	r3, [r3, r2]
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	d007      	beq.n	80009e6 <main+0x7e>
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <main+0x184>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <main+0x18c>)
 80009e0:	5c9b      	ldrb	r3, [r3, r2]
 80009e2:	2b0d      	cmp	r3, #13
 80009e4:	d140      	bne.n	8000a68 <main+0x100>
				  read_ptr ++;
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <main+0x184>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <main+0x184>)
 80009f2:	701a      	strb	r2, [r3, #0]
				  read_ptr %= BUFFER_SIZE;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <main+0x184>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4a3f      	ldr	r2, [pc, #252]	; (8000af8 <main+0x190>)
 80009fc:	fba2 1203 	umull	r1, r2, r2, r3
 8000a00:	0952      	lsrs	r2, r2, #5
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <main+0x184>)
 8000a0e:	701a      	strb	r2, [r3, #0]
				  const char* t_code_str = (const char*)t_code;
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	623b      	str	r3, [r7, #32]

				  if(start_flag){
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <main+0x194>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00e      	beq.n	8000a3a <main+0xd2>
					  uint8_t opcode = processCommand(t_code_str);
 8000a1c:	6a38      	ldr	r0, [r7, #32]
 8000a1e:	f7ff fe3d 	bl	800069c <processCommand>
 8000a22:	4603      	mov	r3, r0
 8000a24:	77fb      	strb	r3, [r7, #31]

					  if( opcode == 11 ||opcode == 12){
 8000a26:	7ffb      	ldrb	r3, [r7, #31]
 8000a28:	2b0b      	cmp	r3, #11
 8000a2a:	d002      	beq.n	8000a32 <main+0xca>
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	2b0c      	cmp	r3, #12
 8000a30:	d10c      	bne.n	8000a4c <main+0xe4>
						  END_flag = 1;
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <main+0x198>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e008      	b.n	8000a4c <main+0xe4>
					  }
				  }else{
					  if(checkForStart(t_code_str)){
 8000a3a:	6a38      	ldr	r0, [r7, #32]
 8000a3c:	f7ff fdbe 	bl	80005bc <checkForStart>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <main+0xe4>
						  start_flag =1;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <main+0x194>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
				  }




				  t_code_index =0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  if(!END_flag){
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <main+0x198>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d12c      	bne.n	8000ab4 <main+0x14c>
					  HAL_UART_Transmit(&huart2, ready_for_new_command, 5, 10);
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	4922      	ldr	r1, [pc, #136]	; (8000ae8 <main+0x180>)
 8000a60:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <main+0x170>)
 8000a62:	f001 fcca 	bl	80023fa <HAL_UART_Transmit>
			  if(uart_buffer[read_ptr] == '\n' ||uart_buffer[read_ptr] == '\r'){
 8000a66:	e025      	b.n	8000ab4 <main+0x14c>
				  }
			  }else{

				  t_code[t_code_index] = uart_buffer[read_ptr];
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <main+0x184>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a74:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <main+0x18c>)
 8000a76:	5c52      	ldrb	r2, [r2, r1]
 8000a78:	3328      	adds	r3, #40	; 0x28
 8000a7a:	443b      	add	r3, r7
 8000a7c:	f803 2c24 	strb.w	r2, [r3, #-36]
				  t_code_index++;
 8000a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a84:	3301      	adds	r3, #1
 8000a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  read_ptr ++;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <main+0x184>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <main+0x184>)
 8000a96:	701a      	strb	r2, [r3, #0]
				  read_ptr %= BUFFER_SIZE;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <main+0x184>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <main+0x190>)
 8000aa0:	fba2 1203 	umull	r1, r2, r2, r3
 8000aa4:	0952      	lsrs	r2, r2, #5
 8000aa6:	2164      	movs	r1, #100	; 0x64
 8000aa8:	fb01 f202 	mul.w	r2, r1, r2
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <main+0x184>)
 8000ab2:	701a      	strb	r2, [r3, #0]
	  while(!END_flag){
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <main+0x198>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f43f af7c 	beq.w	80009b6 <main+0x4e>
		  //if there is a new byte, form it onto


	  }
	  //wait for next command
	  PCH_flag = 0;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <main+0x178>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
	  END_flag = 0;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <main+0x198>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	  start_flag =0;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <main+0x194>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
  {
 8000ad0:	e75d      	b.n	800098e <main+0x26>
 8000ad2:	bf00      	nop
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	200000cd 	.word	0x200000cd
 8000ae0:	200000ce 	.word	0x200000ce
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000138 	.word	0x20000138
 8000af0:	20000139 	.word	0x20000139
 8000af4:	200000d4 	.word	0x200000d4
 8000af8:	51eb851f 	.word	0x51eb851f
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	200000cf 	.word	0x200000cf

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fcca 	bl	80034ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <SystemClock_Config+0xd4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <SystemClock_Config+0xd4>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <SystemClock_Config+0xd4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <SystemClock_Config+0xd8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <SystemClock_Config+0xd8>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <SystemClock_Config+0xd8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b82:	2304      	movs	r3, #4
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f946 	bl	8001e24 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b9e:	f000 f8eb 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fde6 	bl	8001790 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bca:	f000 f8d5 	bl	8000d78 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3750      	adds	r7, #80	; 0x50
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f001 fba2 	bl	8002360 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f000 f8a9 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000088 	.word	0x20000088
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000cc0:	f000 fd4c 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0xd8>)
 8000cdc:	f000 fbaa 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000cf8:	f000 fb9c 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020800 	.word	0x40020800

08000d10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) { // Adjust this based on your UART instance
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_UART_RxCpltCallback+0x54>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d11d      	bne.n	8000d5c <HAL_UART_RxCpltCallback+0x4c>
        uart_buffer[write_ptr] = rx_data; // Store the received data in the buffer
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_RxCpltCallback+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_UART_RxCpltCallback+0x5c>)
 8000d2a:	7819      	ldrb	r1, [r3, #0]
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_UART_RxCpltCallback+0x60>)
 8000d2e:	5499      	strb	r1, [r3, r2]
        write_ptr = (write_ptr + 1) % BUFFER_SIZE; // Increment the write pointer and wrap around if needed
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_UART_RxCpltCallback+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_UART_RxCpltCallback+0x64>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1151      	asrs	r1, r2, #5
 8000d40:	17da      	asrs	r2, r3, #31
 8000d42:	1a8a      	subs	r2, r1, r2
 8000d44:	2164      	movs	r1, #100	; 0x64
 8000d46:	fb01 f202 	mul.w	r2, r1, r2
 8000d4a:	1a9a      	subs	r2, r3, r2
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_UART_RxCpltCallback+0x58>)
 8000d50:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &rx_data, 1); // Start the next receive
 8000d52:	2201      	movs	r2, #1
 8000d54:	4905      	ldr	r1, [pc, #20]	; (8000d6c <HAL_UART_RxCpltCallback+0x5c>)
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <HAL_UART_RxCpltCallback+0x54>)
 8000d58:	f001 fbe1 	bl	800251e <HAL_UART_Receive_IT>
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000088 	.word	0x20000088
 8000d68:	20000139 	.word	0x20000139
 8000d6c:	200000cc 	.word	0x200000cc
 8000d70:	200000d4 	.word	0x200000d4
 8000d74:	51eb851f 	.word	0x51eb851f

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	f000 fa62 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d133      	bne.n	8000e5e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_UART_MspInit+0x98>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_UART_MspInit+0x9c>)
 8000e4a:	f000 faf3 	bl	8001434 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2026      	movs	r0, #38	; 0x26
 8000e54:	f000 fa25 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e58:	2026      	movs	r0, #38	; 0x26
 8000e5a:	f000 fa3e 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8d0 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USART2_IRQHandler+0x10>)
 8000ece:	f001 fb57 	bl	8002580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000088 	.word	0x20000088

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f002 fae8 	bl	80034e0 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	2000013c 	.word	0x2000013c
 8000f44:	20000290 	.word	0x20000290

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 faa7 	bl	80034ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fce3 	bl	8000968 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fb0:	080042d8 	.word	0x080042d8
  ldr r2, =_sbss
 8000fb4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fb8:	2000028c 	.word	0x2000028c

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94f 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fec6 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92f 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000010 	.word	0x20000010
 800105c:	20000018 	.word	0x20000018
 8001060:	20000014 	.word	0x20000014

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000018 	.word	0x20000018
 8001088:	20000140 	.word	0x20000140

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000140 	.word	0x20000140

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000018 	.word	0x20000018

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff feb6 	bl	800108c <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e052      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0216 	bic.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <HAL_DMA_Abort+0x62>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0208 	bic.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e013      	b.n	80013ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe7b 	bl	800108c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d90c      	bls.n	80013ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e015      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00c      	b.n	8001426 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e165      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8154 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ae 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a5c      	ldr	r2, [pc, #368]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a58      	ldr	r2, [pc, #352]	; (8001738 <HAL_GPIO_Init+0x304>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4f      	ldr	r2, [pc, #316]	; (800173c <HAL_GPIO_Init+0x308>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d025      	beq.n	800164e <HAL_GPIO_Init+0x21a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4e      	ldr	r2, [pc, #312]	; (8001740 <HAL_GPIO_Init+0x30c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01f      	beq.n	800164a <HAL_GPIO_Init+0x216>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_GPIO_Init+0x310>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x212>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x314>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x20e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x318>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x20a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x31c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x206>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x320>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x202>
 8001632:	2306      	movs	r3, #6
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001636:	2307      	movs	r3, #7
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163a:	2305      	movs	r3, #5
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164e:	2300      	movs	r3, #0
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x324>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	f67f ae96 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40013800 	.word	0x40013800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40021000 	.word	0x40021000
 8001750:	40021400 	.word	0x40021400
 8001754:	40021800 	.word	0x40021800
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff fc04 	bl	800108c <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff fc00 	bl	800108c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f855 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb64 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	08004190 	.word	0x08004190
 8001954:	20000010 	.word	0x20000010
 8001958:	20000014 	.word	0x20000014

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_GetHCLKFreq+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff0 	bl	800195c <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	080041a0 	.word	0x080041a0

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffdc 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	080041a0 	.word	0x080041a0

080019c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c8:	b0ae      	sub	sp, #184	; 0xb8
 80019ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ea:	4bcb      	ldr	r3, [pc, #812]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	f200 8206 	bhi.w	8001e04 <HAL_RCC_GetSysClockFreq+0x440>
 80019f8:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a35 	.word	0x08001a35
 8001a04:	08001e05 	.word	0x08001e05
 8001a08:	08001e05 	.word	0x08001e05
 8001a0c:	08001e05 	.word	0x08001e05
 8001a10:	08001a3d 	.word	0x08001a3d
 8001a14:	08001e05 	.word	0x08001e05
 8001a18:	08001e05 	.word	0x08001e05
 8001a1c:	08001e05 	.word	0x08001e05
 8001a20:	08001a45 	.word	0x08001a45
 8001a24:	08001e05 	.word	0x08001e05
 8001a28:	08001e05 	.word	0x08001e05
 8001a2c:	08001e05 	.word	0x08001e05
 8001a30:	08001c35 	.word	0x08001c35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4bb9      	ldr	r3, [pc, #740]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a3a:	e1e7      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4bb8      	ldr	r3, [pc, #736]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a42:	e1e3      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4bb4      	ldr	r3, [pc, #720]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a50:	4bb1      	ldr	r3, [pc, #708]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d071      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4bae      	ldr	r3, [pc, #696]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a82:	4622      	mov	r2, r4
 8001a84:	462b      	mov	r3, r5
 8001a86:	f04f 0000 	mov.w	r0, #0
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	0159      	lsls	r1, r3, #5
 8001a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a94:	0150      	lsls	r0, r2, #5
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	1a51      	subs	r1, r2, r1
 8001a9e:	6439      	str	r1, [r7, #64]	; 0x40
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	018b      	lsls	r3, r1, #6
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001abe:	4641      	mov	r1, r8
 8001ac0:	018a      	lsls	r2, r1, #6
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	1a51      	subs	r1, r2, r1
 8001ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ac8:	4649      	mov	r1, r9
 8001aca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001adc:	4649      	mov	r1, r9
 8001ade:	00cb      	lsls	r3, r1, #3
 8001ae0:	4641      	mov	r1, r8
 8001ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	00ca      	lsls	r2, r1, #3
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	4622      	mov	r2, r4
 8001af2:	189b      	adds	r3, r3, r2
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	462b      	mov	r3, r5
 8001af8:	460a      	mov	r2, r1
 8001afa:	eb42 0303 	adc.w	r3, r2, r3
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	024b      	lsls	r3, r1, #9
 8001b10:	4621      	mov	r1, r4
 8001b12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b16:	4621      	mov	r1, r4
 8001b18:	024a      	lsls	r2, r1, #9
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b30:	f7fe fbc6 	bl	80002c0 <__aeabi_uldivmod>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b3e:	e067      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b40:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	2200      	movs	r2, #0
 8001b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b94:	4649      	mov	r1, r9
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4641      	mov	r1, r8
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4641      	mov	r1, r8
 8001ba4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ba8:	4649      	mov	r1, r9
 8001baa:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	469b      	mov	fp, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb1a 0303 	adds.w	r3, sl, r3
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8001bfc:	677a      	str	r2, [r7, #116]	; 0x74
 8001bfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c02:	f7fe fb5d 	bl	80002c0 <__aeabi_uldivmod>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c32:	e0eb      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d06b      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	2200      	movs	r2, #0
 8001c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c60:	2300      	movs	r3, #0
 8001c62:	667b      	str	r3, [r7, #100]	; 0x64
 8001c64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c68:	4622      	mov	r2, r4
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	f04f 0000 	mov.w	r0, #0
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	0159      	lsls	r1, r3, #5
 8001c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7a:	0150      	lsls	r0, r2, #5
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4621      	mov	r1, r4
 8001c82:	1a51      	subs	r1, r2, r1
 8001c84:	61b9      	str	r1, [r7, #24]
 8001c86:	4629      	mov	r1, r5
 8001c88:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c9a:	4659      	mov	r1, fp
 8001c9c:	018b      	lsls	r3, r1, #6
 8001c9e:	4651      	mov	r1, sl
 8001ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	018a      	lsls	r2, r1, #6
 8001ca8:	4651      	mov	r1, sl
 8001caa:	ebb2 0801 	subs.w	r8, r2, r1
 8001cae:	4659      	mov	r1, fp
 8001cb0:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc8:	4690      	mov	r8, r2
 8001cca:	4699      	mov	r9, r3
 8001ccc:	4623      	mov	r3, r4
 8001cce:	eb18 0303 	adds.w	r3, r8, r3
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	eb49 0303 	adc.w	r3, r9, r3
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ce8:	4629      	mov	r1, r5
 8001cea:	024b      	lsls	r3, r1, #9
 8001cec:	4621      	mov	r1, r4
 8001cee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	024a      	lsls	r2, r1, #9
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cfe:	2200      	movs	r2, #0
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d08:	f7fe fada 	bl	80002c0 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d16:	e065      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x420>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	4611      	mov	r1, r2
 8001d30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d34:	653b      	str	r3, [r7, #80]	; 0x50
 8001d36:	2300      	movs	r3, #0
 8001d38:	657b      	str	r3, [r7, #84]	; 0x54
 8001d3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d3e:	4642      	mov	r2, r8
 8001d40:	464b      	mov	r3, r9
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	0159      	lsls	r1, r3, #5
 8001d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d50:	0150      	lsls	r0, r2, #5
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4641      	mov	r1, r8
 8001d58:	1a51      	subs	r1, r2, r1
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d70:	4659      	mov	r1, fp
 8001d72:	018b      	lsls	r3, r1, #6
 8001d74:	4651      	mov	r1, sl
 8001d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	018a      	lsls	r2, r1, #6
 8001d7e:	4651      	mov	r1, sl
 8001d80:	1a54      	subs	r4, r2, r1
 8001d82:	4659      	mov	r1, fp
 8001d84:	eb63 0501 	sbc.w	r5, r3, r1
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	00eb      	lsls	r3, r5, #3
 8001d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d96:	00e2      	lsls	r2, r4, #3
 8001d98:	4614      	mov	r4, r2
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	4643      	mov	r3, r8
 8001d9e:	18e3      	adds	r3, r4, r3
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	464b      	mov	r3, r9
 8001da4:	eb45 0303 	adc.w	r3, r5, r3
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dcc:	2200      	movs	r2, #0
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dd6:	f7fe fa73 	bl	80002c0 <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4613      	mov	r3, r2
 8001de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0f1b      	lsrs	r3, r3, #28
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e02:	e003      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	37b8      	adds	r7, #184	; 0xb8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400

08001e24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e28d      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8083 	beq.w	8001f4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e44:	4b94      	ldr	r3, [pc, #592]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d019      	beq.n	8001e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e50:	4b91      	ldr	r3, [pc, #580]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e5c:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b84      	ldr	r3, [pc, #528]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x124>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e25a      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x90>
 8001ea6:	4b7c      	ldr	r3, [pc, #496]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xcc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xb4>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xcc>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6b      	ldr	r2, [pc, #428]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f8c8 	bl	800108c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f8c4 	bl	800108c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e21f      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xdc>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f8b4 	bl	800108c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f8b0 	bl	800108c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e20b      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x104>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d06f      	beq.n	8002036 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f56:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d017      	beq.n	8001f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f62:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x186>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1d3      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4937      	ldr	r1, [pc, #220]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_OscConfig+0x278>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f85d 	bl	800108c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f859 	bl	800108c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1b4      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4925      	ldr	r1, [pc, #148]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_OscConfig+0x278>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f83c 	bl	800108c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002018:	f7ff f838 	bl	800108c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e193      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d036      	beq.n	80020b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x27c>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff f81c 	bl	800108c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff f818 	bl	800108c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e173      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x234>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x27c>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff f805 	bl	800108c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	e00e      	b.n	80020a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff f801 	bl	800108c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d907      	bls.n	80020a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e15c      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
 8002098:	40023800 	.word	0x40023800
 800209c:	42470000 	.word	0x42470000
 80020a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b8a      	ldr	r3, [pc, #552]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ea      	bne.n	8002086 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8097 	beq.w	80021ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b83      	ldr	r3, [pc, #524]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b79      	ldr	r3, [pc, #484]	; (80022d4 <HAL_RCC_OscConfig+0x4b0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a75      	ldr	r2, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x4b0>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe ffc1 	bl	800108c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7fe ffbd 	bl	800108c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e118      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x4b0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x31e>
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x358>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x340>
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x358>
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a59      	ldr	r2, [pc, #356]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a56      	ldr	r2, [pc, #344]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe ff82 	bl	800108c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe ff7e 	bl	800108c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0d7      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x368>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe ff6c 	bl	800108c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe ff68 	bl	800108c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0c1      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80ad 	beq.w	8002350 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d060      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d145      	bne.n	8002296 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <HAL_RCC_OscConfig+0x4b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe ff3c 	bl	800108c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe ff38 	bl	800108c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e093      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	491b      	ldr	r1, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x4b4>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe ff0d 	bl	800108c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe ff09 	bl	800108c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e064      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x452>
 8002294:	e05c      	b.n	8002350 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x4b4>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fef6 	bl	800108c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fef2 	bl	800108c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04d      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x480>
 80022c2:	e045      	b.n	8002350 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e040      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000
 80022d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCC_OscConfig+0x538>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d030      	beq.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d129      	bne.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d122      	bne.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002314:	4293      	cmp	r3, r2
 8002316:	d119      	bne.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	3b01      	subs	r3, #1
 8002326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d10f      	bne.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e03f      	b.n	80023f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fd24 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fddf 	bl	8002f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b08a      	sub	sp, #40	; 0x28
 80023fe:	af02      	add	r7, sp, #8
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	d17c      	bne.n	8002514 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_UART_Transmit+0x2c>
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e075      	b.n	8002516 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_UART_Transmit+0x3e>
 8002434:	2302      	movs	r3, #2
 8002436:	e06e      	b.n	8002516 <HAL_UART_Transmit+0x11c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2221      	movs	r2, #33	; 0x21
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244e:	f7fe fe1d 	bl	800108c <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002468:	d108      	bne.n	800247c <HAL_UART_Transmit+0x82>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d104      	bne.n	800247c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e003      	b.n	8002484 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800248c:	e02a      	b.n	80024e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fb1f 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e036      	b.n	8002516 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3302      	adds	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e007      	b.n	80024d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1cf      	bne.n	800248e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 faef 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d11d      	bne.n	8002574 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_UART_Receive_IT+0x26>
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e016      	b.n	8002576 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_UART_Receive_IT+0x38>
 8002552:	2302      	movs	r3, #2
 8002554:	e00f      	b.n	8002576 <HAL_UART_Receive_IT+0x58>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	461a      	mov	r2, r3
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fb24 	bl	8002bb8 <UART_Start_Receive_IT>
 8002570:	4603      	mov	r3, r0
 8002572:	e000      	b.n	8002576 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0ba      	sub	sp, #232	; 0xe8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_UART_IRQHandler+0x66>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fc07 	bl	8002df2 <UART_Receive_IT>
      return;
 80025e4:	e256      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80de 	beq.w	80027ac <HAL_UART_IRQHandler+0x22c>
 80025f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002600:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80d1 	beq.w	80027ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_UART_IRQHandler+0xae>
 8002616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_UART_IRQHandler+0xd2>
 800263a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_UART_IRQHandler+0xf6>
 800265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d011      	beq.n	80026a6 <HAL_UART_IRQHandler+0x126>
 8002682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800268e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0208 	orr.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 81ed 	beq.w	8002a8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_UART_IRQHandler+0x14e>
 80026bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fb92 	bl	8002df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_UART_IRQHandler+0x17a>
 80026f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04f      	beq.n	800279a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa9a 	bl	8002c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d141      	bne.n	8002792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1d9      	bne.n	800270e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	4a7d      	ldr	r2, [pc, #500]	; (800295c <HAL_UART_IRQHandler+0x3dc>)
 8002768:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fe3d 	bl	80013ee <HAL_DMA_Abort_IT>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002784:	4610      	mov	r0, r2
 8002786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	e00e      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f990 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e00a      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f98c 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	e006      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f988 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027a6:	e170      	b.n	8002a8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	bf00      	nop
    return;
 80027aa:	e16e      	b.n	8002a8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 814a 	bne.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8143 	beq.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 813c 	beq.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	f040 80b4 	bne.w	8002960 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8140 	beq.w	8002a8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002816:	429a      	cmp	r2, r3
 8002818:	f080 8139 	bcs.w	8002a8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002822:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	f000 8088 	beq.w	8002942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800285e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800286a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1d9      	bne.n	8002832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800288e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e1      	bne.n	800287e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3314      	adds	r3, #20
 80028da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e3      	bne.n	80028ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002912:	f023 0310 	bic.w	r3, r3, #16
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002924:	65ba      	str	r2, [r7, #88]	; 0x58
 8002926:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800292a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e3      	bne.n	8002900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fce6 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294a:	b29b      	uxth	r3, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8b6 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002958:	e099      	b.n	8002a8e <HAL_UART_IRQHandler+0x50e>
 800295a:	bf00      	nop
 800295c:	08002cfb 	.word	0x08002cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002968:	b29b      	uxth	r3, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 808b 	beq.w	8002a92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800297c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8086 	beq.w	8002a92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800299c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029aa:	647a      	str	r2, [r7, #68]	; 0x44
 80029ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e3      	bne.n	8002986 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	623b      	str	r3, [r7, #32]
   return(result);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e2:	633a      	str	r2, [r7, #48]	; 0x30
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e3      	bne.n	80029be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a28:	61fa      	str	r2, [r7, #28]
 8002a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	617b      	str	r3, [r7, #20]
   return(result);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e3      	bne.n	8002a04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f83e 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a48:	e023      	b.n	8002a92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_UART_IRQHandler+0x4ea>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f95d 	bl	8002d22 <UART_Transmit_IT>
    return;
 8002a68:	e014      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <HAL_UART_IRQHandler+0x514>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f99d 	bl	8002dc2 <UART_EndTransmit_IT>
    return;
 8002a88:	e004      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
    return;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
      return;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
      return;
 8002a92:	bf00      	nop
  }
}
 8002a94:	37e8      	adds	r7, #232	; 0xe8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop

08002a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b090      	sub	sp, #64	; 0x40
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aec:	e050      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d04c      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002afc:	f7fe fac6 	bl	800108c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d241      	bcs.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b60:	623a      	str	r2, [r7, #32]
 8002b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	69f9      	ldr	r1, [r7, #28]
 8002b66:	6a3a      	ldr	r2, [r7, #32]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e00f      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d09f      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3740      	adds	r7, #64	; 0x40
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2222      	movs	r2, #34	; 0x22
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0220 	orr.w	r2, r2, #32
 8002c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b095      	sub	sp, #84	; 0x54
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	e853 3f00 	ldrex	r3, [r3]
 8002c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e5      	bne.n	8002c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d119      	bne.n	8002ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ccc:	61ba      	str	r2, [r7, #24]
 8002cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cee:	bf00      	nop
 8002cf0:	3754      	adds	r7, #84	; 0x54
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fecb 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b21      	cmp	r3, #33	; 0x21
 8002d34:	d13e      	bne.n	8002db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d114      	bne.n	8002d6a <UART_Transmit_IT+0x48>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d110      	bne.n	8002d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e008      	b.n	8002d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	1c59      	adds	r1, r3, #1
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6211      	str	r1, [r2, #32]
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10f      	bne.n	8002db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fe5a 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08c      	sub	sp, #48	; 0x30
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b22      	cmp	r3, #34	; 0x22
 8002e04:	f040 80ab 	bne.w	8002f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e10:	d117      	bne.n	8002e42 <UART_Receive_IT+0x50>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	1c9a      	adds	r2, r3, #2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e40:	e026      	b.n	8002e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d007      	beq.n	8002e66 <UART_Receive_IT+0x74>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <UART_Receive_IT+0x82>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e008      	b.n	8002e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d15a      	bne.n	8002f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0220 	bic.w	r2, r2, #32
 8002eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d135      	bne.n	8002f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f023 0310 	bic.w	r3, r3, #16
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	623a      	str	r2, [r7, #32]
 8002f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	69f9      	ldr	r1, [r7, #28]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d10a      	bne.n	8002f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fdbb 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
 8002f4e:	e002      	b.n	8002f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd fedd 	bl	8000d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e002      	b.n	8002f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b0c0      	sub	sp, #256	; 0x100
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	68d9      	ldr	r1, [r3, #12]
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	ea40 0301 	orr.w	r3, r0, r1
 8002f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fc0:	f021 010c 	bic.w	r1, r1, #12
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	6999      	ldr	r1, [r3, #24]
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	ea40 0301 	orr.w	r3, r0, r1
 8002fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b8f      	ldr	r3, [pc, #572]	; (8003234 <UART_SetConfig+0x2cc>)
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d005      	beq.n	8003008 <UART_SetConfig+0xa0>
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b8d      	ldr	r3, [pc, #564]	; (8003238 <UART_SetConfig+0x2d0>)
 8003004:	429a      	cmp	r2, r3
 8003006:	d104      	bne.n	8003012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7fe fcc8 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 800300c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003010:	e003      	b.n	800301a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003012:	f7fe fcaf 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8003016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003024:	f040 810c 	bne.w	8003240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	1891      	adds	r1, r2, r2
 8003040:	65b9      	str	r1, [r7, #88]	; 0x58
 8003042:	415b      	adcs	r3, r3
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800304a:	4621      	mov	r1, r4
 800304c:	eb12 0801 	adds.w	r8, r2, r1
 8003050:	4629      	mov	r1, r5
 8003052:	eb43 0901 	adc.w	r9, r3, r1
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306a:	4690      	mov	r8, r2
 800306c:	4699      	mov	r9, r3
 800306e:	4623      	mov	r3, r4
 8003070:	eb18 0303 	adds.w	r3, r8, r3
 8003074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003078:	462b      	mov	r3, r5
 800307a:	eb49 0303 	adc.w	r3, r9, r3
 800307e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800308e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003096:	460b      	mov	r3, r1
 8003098:	18db      	adds	r3, r3, r3
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
 800309c:	4613      	mov	r3, r2
 800309e:	eb42 0303 	adc.w	r3, r2, r3
 80030a2:	657b      	str	r3, [r7, #84]	; 0x54
 80030a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030ac:	f7fd f908 	bl	80002c0 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <UART_SetConfig+0x2d4>)
 80030b6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	011c      	lsls	r4, r3, #4
 80030be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80030d8:	415b      	adcs	r3, r3
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030e0:	4641      	mov	r1, r8
 80030e2:	eb12 0a01 	adds.w	sl, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb43 0b01 	adc.w	fp, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003100:	4692      	mov	sl, r2
 8003102:	469b      	mov	fp, r3
 8003104:	4643      	mov	r3, r8
 8003106:	eb1a 0303 	adds.w	r3, sl, r3
 800310a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800310e:	464b      	mov	r3, r9
 8003110:	eb4b 0303 	adc.w	r3, fp, r3
 8003114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800312c:	460b      	mov	r3, r1
 800312e:	18db      	adds	r3, r3, r3
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
 8003132:	4613      	mov	r3, r2
 8003134:	eb42 0303 	adc.w	r3, r2, r3
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
 800313a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003142:	f7fd f8bd 	bl	80002c0 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4611      	mov	r1, r2
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <UART_SetConfig+0x2d4>)
 800314e:	fba3 2301 	umull	r2, r3, r3, r1
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2264      	movs	r2, #100	; 0x64
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	1acb      	subs	r3, r1, r3
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <UART_SetConfig+0x2d4>)
 8003164:	fba3 2302 	umull	r2, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003170:	441c      	add	r4, r3
 8003172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800317c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	63b9      	str	r1, [r7, #56]	; 0x38
 800318c:	415b      	adcs	r3, r3
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003194:	4641      	mov	r1, r8
 8003196:	1851      	adds	r1, r2, r1
 8003198:	6339      	str	r1, [r7, #48]	; 0x30
 800319a:	4649      	mov	r1, r9
 800319c:	414b      	adcs	r3, r1
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031ac:	4659      	mov	r1, fp
 80031ae:	00cb      	lsls	r3, r1, #3
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b6:	4651      	mov	r1, sl
 80031b8:	00ca      	lsls	r2, r1, #3
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	4642      	mov	r2, r8
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c8:	464b      	mov	r3, r9
 80031ca:	460a      	mov	r2, r1
 80031cc:	eb42 0303 	adc.w	r3, r2, r3
 80031d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031e8:	460b      	mov	r3, r1
 80031ea:	18db      	adds	r3, r3, r3
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ee:	4613      	mov	r3, r2
 80031f0:	eb42 0303 	adc.w	r3, r2, r3
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031fe:	f7fd f85f 	bl	80002c0 <__aeabi_uldivmod>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <UART_SetConfig+0x2d4>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2164      	movs	r1, #100	; 0x64
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <UART_SetConfig+0x2d4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4422      	add	r2, r4
 800322e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003230:	e106      	b.n	8003440 <UART_SetConfig+0x4d8>
 8003232:	bf00      	nop
 8003234:	40011000 	.word	0x40011000
 8003238:	40011400 	.word	0x40011400
 800323c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800324a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800324e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003252:	4642      	mov	r2, r8
 8003254:	464b      	mov	r3, r9
 8003256:	1891      	adds	r1, r2, r2
 8003258:	6239      	str	r1, [r7, #32]
 800325a:	415b      	adcs	r3, r3
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003262:	4641      	mov	r1, r8
 8003264:	1854      	adds	r4, r2, r1
 8003266:	4649      	mov	r1, r9
 8003268:	eb43 0501 	adc.w	r5, r3, r1
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	00eb      	lsls	r3, r5, #3
 8003276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	4643      	mov	r3, r8
 8003282:	18e3      	adds	r3, r4, r3
 8003284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003288:	464b      	mov	r3, r9
 800328a:	eb45 0303 	adc.w	r3, r5, r3
 800328e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800329e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032ae:	4629      	mov	r1, r5
 80032b0:	008b      	lsls	r3, r1, #2
 80032b2:	4621      	mov	r1, r4
 80032b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b8:	4621      	mov	r1, r4
 80032ba:	008a      	lsls	r2, r1, #2
 80032bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032c0:	f7fc fffe 	bl	80002c0 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4b60      	ldr	r3, [pc, #384]	; (800344c <UART_SetConfig+0x4e4>)
 80032ca:	fba3 2302 	umull	r2, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	011c      	lsls	r4, r3, #4
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	61b9      	str	r1, [r7, #24]
 80032ec:	415b      	adcs	r3, r3
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f4:	4641      	mov	r1, r8
 80032f6:	1851      	adds	r1, r2, r1
 80032f8:	6139      	str	r1, [r7, #16]
 80032fa:	4649      	mov	r1, r9
 80032fc:	414b      	adcs	r3, r1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800330c:	4659      	mov	r1, fp
 800330e:	00cb      	lsls	r3, r1, #3
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003316:	4651      	mov	r1, sl
 8003318:	00ca      	lsls	r2, r1, #3
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	4603      	mov	r3, r0
 8003320:	4642      	mov	r2, r8
 8003322:	189b      	adds	r3, r3, r2
 8003324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003328:	464b      	mov	r3, r9
 800332a:	460a      	mov	r2, r1
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	67bb      	str	r3, [r7, #120]	; 0x78
 800333e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800334c:	4649      	mov	r1, r9
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	4641      	mov	r1, r8
 8003352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003356:	4641      	mov	r1, r8
 8003358:	008a      	lsls	r2, r1, #2
 800335a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800335e:	f7fc ffaf 	bl	80002c0 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4611      	mov	r1, r2
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <UART_SetConfig+0x4e4>)
 800336a:	fba3 2301 	umull	r2, r3, r3, r1
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2264      	movs	r2, #100	; 0x64
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	3332      	adds	r3, #50	; 0x32
 800337c:	4a33      	ldr	r2, [pc, #204]	; (800344c <UART_SetConfig+0x4e4>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	441c      	add	r4, r3
 800338a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338e:	2200      	movs	r2, #0
 8003390:	673b      	str	r3, [r7, #112]	; 0x70
 8003392:	677a      	str	r2, [r7, #116]	; 0x74
 8003394:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	1891      	adds	r1, r2, r2
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	415b      	adcs	r3, r3
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a8:	4641      	mov	r1, r8
 80033aa:	1851      	adds	r1, r2, r1
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	4649      	mov	r1, r9
 80033b0:	414b      	adcs	r3, r1
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033c0:	4659      	mov	r1, fp
 80033c2:	00cb      	lsls	r3, r1, #3
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ca:	4651      	mov	r1, sl
 80033cc:	00ca      	lsls	r2, r1, #3
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	4642      	mov	r2, r8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033da:	464b      	mov	r3, r9
 80033dc:	460a      	mov	r2, r1
 80033de:	eb42 0303 	adc.w	r3, r2, r3
 80033e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
 80033ee:	667a      	str	r2, [r7, #100]	; 0x64
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033fc:	4649      	mov	r1, r9
 80033fe:	008b      	lsls	r3, r1, #2
 8003400:	4641      	mov	r1, r8
 8003402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003406:	4641      	mov	r1, r8
 8003408:	008a      	lsls	r2, r1, #2
 800340a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800340e:	f7fc ff57 	bl	80002c0 <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <UART_SetConfig+0x4e4>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2164      	movs	r1, #100	; 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	3332      	adds	r3, #50	; 0x32
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <UART_SetConfig+0x4e4>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4422      	add	r2, r4
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003446:	46bd      	mov	sp, r7
 8003448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344c:	51eb851f 	.word	0x51eb851f

08003450 <siscanf>:
 8003450:	b40e      	push	{r1, r2, r3}
 8003452:	b510      	push	{r4, lr}
 8003454:	b09f      	sub	sp, #124	; 0x7c
 8003456:	ac21      	add	r4, sp, #132	; 0x84
 8003458:	f44f 7101 	mov.w	r1, #516	; 0x204
 800345c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003466:	9004      	str	r0, [sp, #16]
 8003468:	9008      	str	r0, [sp, #32]
 800346a:	f7fc fed1 	bl	8000210 <strlen>
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <siscanf+0x50>)
 8003470:	9005      	str	r0, [sp, #20]
 8003472:	9009      	str	r0, [sp, #36]	; 0x24
 8003474:	930d      	str	r3, [sp, #52]	; 0x34
 8003476:	480b      	ldr	r0, [pc, #44]	; (80034a4 <siscanf+0x54>)
 8003478:	9a01      	ldr	r2, [sp, #4]
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	9403      	str	r4, [sp, #12]
 800347e:	2300      	movs	r3, #0
 8003480:	9311      	str	r3, [sp, #68]	; 0x44
 8003482:	9316      	str	r3, [sp, #88]	; 0x58
 8003484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003488:	f8ad 301e 	strh.w	r3, [sp, #30]
 800348c:	a904      	add	r1, sp, #16
 800348e:	4623      	mov	r3, r4
 8003490:	f000 f9a4 	bl	80037dc <__ssvfiscanf_r>
 8003494:	b01f      	add	sp, #124	; 0x7c
 8003496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349a:	b003      	add	sp, #12
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	080034a9 	.word	0x080034a9
 80034a4:	20000068 	.word	0x20000068

080034a8 <__seofread>:
 80034a8:	2000      	movs	r0, #0
 80034aa:	4770      	bx	lr

080034ac <memset>:
 80034ac:	4402      	add	r2, r0
 80034ae:	4603      	mov	r3, r0
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d100      	bne.n	80034b6 <memset+0xa>
 80034b4:	4770      	bx	lr
 80034b6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ba:	e7f9      	b.n	80034b0 <memset+0x4>

080034bc <strncmp>:
 80034bc:	b510      	push	{r4, lr}
 80034be:	b16a      	cbz	r2, 80034dc <strncmp+0x20>
 80034c0:	3901      	subs	r1, #1
 80034c2:	1884      	adds	r4, r0, r2
 80034c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d103      	bne.n	80034d8 <strncmp+0x1c>
 80034d0:	42a0      	cmp	r0, r4
 80034d2:	d001      	beq.n	80034d8 <strncmp+0x1c>
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d1f5      	bne.n	80034c4 <strncmp+0x8>
 80034d8:	1ad0      	subs	r0, r2, r3
 80034da:	bd10      	pop	{r4, pc}
 80034dc:	4610      	mov	r0, r2
 80034de:	e7fc      	b.n	80034da <strncmp+0x1e>

080034e0 <__errno>:
 80034e0:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <__errno+0x8>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000068 	.word	0x20000068

080034ec <__libc_init_array>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4d0d      	ldr	r5, [pc, #52]	; (8003524 <__libc_init_array+0x38>)
 80034f0:	4c0d      	ldr	r4, [pc, #52]	; (8003528 <__libc_init_array+0x3c>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	2600      	movs	r6, #0
 80034f8:	42a6      	cmp	r6, r4
 80034fa:	d109      	bne.n	8003510 <__libc_init_array+0x24>
 80034fc:	4d0b      	ldr	r5, [pc, #44]	; (800352c <__libc_init_array+0x40>)
 80034fe:	4c0c      	ldr	r4, [pc, #48]	; (8003530 <__libc_init_array+0x44>)
 8003500:	f000 fdf4 	bl	80040ec <_init>
 8003504:	1b64      	subs	r4, r4, r5
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	2600      	movs	r6, #0
 800350a:	42a6      	cmp	r6, r4
 800350c:	d105      	bne.n	800351a <__libc_init_array+0x2e>
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	f855 3b04 	ldr.w	r3, [r5], #4
 8003514:	4798      	blx	r3
 8003516:	3601      	adds	r6, #1
 8003518:	e7ee      	b.n	80034f8 <__libc_init_array+0xc>
 800351a:	f855 3b04 	ldr.w	r3, [r5], #4
 800351e:	4798      	blx	r3
 8003520:	3601      	adds	r6, #1
 8003522:	e7f2      	b.n	800350a <__libc_init_array+0x1e>
 8003524:	080042d0 	.word	0x080042d0
 8003528:	080042d0 	.word	0x080042d0
 800352c:	080042d0 	.word	0x080042d0
 8003530:	080042d4 	.word	0x080042d4

08003534 <__retarget_lock_acquire_recursive>:
 8003534:	4770      	bx	lr

08003536 <__retarget_lock_release_recursive>:
 8003536:	4770      	bx	lr

08003538 <_free_r>:
 8003538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800353a:	2900      	cmp	r1, #0
 800353c:	d044      	beq.n	80035c8 <_free_r+0x90>
 800353e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003542:	9001      	str	r0, [sp, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f1a1 0404 	sub.w	r4, r1, #4
 800354a:	bfb8      	it	lt
 800354c:	18e4      	addlt	r4, r4, r3
 800354e:	f000 f8df 	bl	8003710 <__malloc_lock>
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <_free_r+0x94>)
 8003554:	9801      	ldr	r0, [sp, #4]
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	b933      	cbnz	r3, 8003568 <_free_r+0x30>
 800355a:	6063      	str	r3, [r4, #4]
 800355c:	6014      	str	r4, [r2, #0]
 800355e:	b003      	add	sp, #12
 8003560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003564:	f000 b8da 	b.w	800371c <__malloc_unlock>
 8003568:	42a3      	cmp	r3, r4
 800356a:	d908      	bls.n	800357e <_free_r+0x46>
 800356c:	6825      	ldr	r5, [r4, #0]
 800356e:	1961      	adds	r1, r4, r5
 8003570:	428b      	cmp	r3, r1
 8003572:	bf01      	itttt	eq
 8003574:	6819      	ldreq	r1, [r3, #0]
 8003576:	685b      	ldreq	r3, [r3, #4]
 8003578:	1949      	addeq	r1, r1, r5
 800357a:	6021      	streq	r1, [r4, #0]
 800357c:	e7ed      	b.n	800355a <_free_r+0x22>
 800357e:	461a      	mov	r2, r3
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b10b      	cbz	r3, 8003588 <_free_r+0x50>
 8003584:	42a3      	cmp	r3, r4
 8003586:	d9fa      	bls.n	800357e <_free_r+0x46>
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	1855      	adds	r5, r2, r1
 800358c:	42a5      	cmp	r5, r4
 800358e:	d10b      	bne.n	80035a8 <_free_r+0x70>
 8003590:	6824      	ldr	r4, [r4, #0]
 8003592:	4421      	add	r1, r4
 8003594:	1854      	adds	r4, r2, r1
 8003596:	42a3      	cmp	r3, r4
 8003598:	6011      	str	r1, [r2, #0]
 800359a:	d1e0      	bne.n	800355e <_free_r+0x26>
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	440c      	add	r4, r1
 80035a4:	6014      	str	r4, [r2, #0]
 80035a6:	e7da      	b.n	800355e <_free_r+0x26>
 80035a8:	d902      	bls.n	80035b0 <_free_r+0x78>
 80035aa:	230c      	movs	r3, #12
 80035ac:	6003      	str	r3, [r0, #0]
 80035ae:	e7d6      	b.n	800355e <_free_r+0x26>
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	1961      	adds	r1, r4, r5
 80035b4:	428b      	cmp	r3, r1
 80035b6:	bf04      	itt	eq
 80035b8:	6819      	ldreq	r1, [r3, #0]
 80035ba:	685b      	ldreq	r3, [r3, #4]
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	bf04      	itt	eq
 80035c0:	1949      	addeq	r1, r1, r5
 80035c2:	6021      	streq	r1, [r4, #0]
 80035c4:	6054      	str	r4, [r2, #4]
 80035c6:	e7ca      	b.n	800355e <_free_r+0x26>
 80035c8:	b003      	add	sp, #12
 80035ca:	bd30      	pop	{r4, r5, pc}
 80035cc:	20000284 	.word	0x20000284

080035d0 <sbrk_aligned>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	4e0e      	ldr	r6, [pc, #56]	; (800360c <sbrk_aligned+0x3c>)
 80035d4:	460c      	mov	r4, r1
 80035d6:	6831      	ldr	r1, [r6, #0]
 80035d8:	4605      	mov	r5, r0
 80035da:	b911      	cbnz	r1, 80035e2 <sbrk_aligned+0x12>
 80035dc:	f000 fc38 	bl	8003e50 <_sbrk_r>
 80035e0:	6030      	str	r0, [r6, #0]
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 fc33 	bl	8003e50 <_sbrk_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	d00a      	beq.n	8003604 <sbrk_aligned+0x34>
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d007      	beq.n	8003608 <sbrk_aligned+0x38>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 fc28 	bl	8003e50 <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d101      	bne.n	8003608 <sbrk_aligned+0x38>
 8003604:	f04f 34ff 	mov.w	r4, #4294967295
 8003608:	4620      	mov	r0, r4
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	20000288 	.word	0x20000288

08003610 <_malloc_r>:
 8003610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003614:	1ccd      	adds	r5, r1, #3
 8003616:	f025 0503 	bic.w	r5, r5, #3
 800361a:	3508      	adds	r5, #8
 800361c:	2d0c      	cmp	r5, #12
 800361e:	bf38      	it	cc
 8003620:	250c      	movcc	r5, #12
 8003622:	2d00      	cmp	r5, #0
 8003624:	4607      	mov	r7, r0
 8003626:	db01      	blt.n	800362c <_malloc_r+0x1c>
 8003628:	42a9      	cmp	r1, r5
 800362a:	d905      	bls.n	8003638 <_malloc_r+0x28>
 800362c:	230c      	movs	r3, #12
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	2600      	movs	r6, #0
 8003632:	4630      	mov	r0, r6
 8003634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800370c <_malloc_r+0xfc>
 800363c:	f000 f868 	bl	8003710 <__malloc_lock>
 8003640:	f8d8 3000 	ldr.w	r3, [r8]
 8003644:	461c      	mov	r4, r3
 8003646:	bb5c      	cbnz	r4, 80036a0 <_malloc_r+0x90>
 8003648:	4629      	mov	r1, r5
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff ffc0 	bl	80035d0 <sbrk_aligned>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	4604      	mov	r4, r0
 8003654:	d155      	bne.n	8003702 <_malloc_r+0xf2>
 8003656:	f8d8 4000 	ldr.w	r4, [r8]
 800365a:	4626      	mov	r6, r4
 800365c:	2e00      	cmp	r6, #0
 800365e:	d145      	bne.n	80036ec <_malloc_r+0xdc>
 8003660:	2c00      	cmp	r4, #0
 8003662:	d048      	beq.n	80036f6 <_malloc_r+0xe6>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	4631      	mov	r1, r6
 8003668:	4638      	mov	r0, r7
 800366a:	eb04 0903 	add.w	r9, r4, r3
 800366e:	f000 fbef 	bl	8003e50 <_sbrk_r>
 8003672:	4581      	cmp	r9, r0
 8003674:	d13f      	bne.n	80036f6 <_malloc_r+0xe6>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	1a6d      	subs	r5, r5, r1
 800367a:	4629      	mov	r1, r5
 800367c:	4638      	mov	r0, r7
 800367e:	f7ff ffa7 	bl	80035d0 <sbrk_aligned>
 8003682:	3001      	adds	r0, #1
 8003684:	d037      	beq.n	80036f6 <_malloc_r+0xe6>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	442b      	add	r3, r5
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	f8d8 3000 	ldr.w	r3, [r8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d038      	beq.n	8003706 <_malloc_r+0xf6>
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	42a2      	cmp	r2, r4
 8003698:	d12b      	bne.n	80036f2 <_malloc_r+0xe2>
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e00f      	b.n	80036c0 <_malloc_r+0xb0>
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	1b52      	subs	r2, r2, r5
 80036a4:	d41f      	bmi.n	80036e6 <_malloc_r+0xd6>
 80036a6:	2a0b      	cmp	r2, #11
 80036a8:	d917      	bls.n	80036da <_malloc_r+0xca>
 80036aa:	1961      	adds	r1, r4, r5
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	6025      	str	r5, [r4, #0]
 80036b0:	bf18      	it	ne
 80036b2:	6059      	strne	r1, [r3, #4]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	bf08      	it	eq
 80036b8:	f8c8 1000 	streq.w	r1, [r8]
 80036bc:	5162      	str	r2, [r4, r5]
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	4638      	mov	r0, r7
 80036c2:	f104 060b 	add.w	r6, r4, #11
 80036c6:	f000 f829 	bl	800371c <__malloc_unlock>
 80036ca:	f026 0607 	bic.w	r6, r6, #7
 80036ce:	1d23      	adds	r3, r4, #4
 80036d0:	1af2      	subs	r2, r6, r3
 80036d2:	d0ae      	beq.n	8003632 <_malloc_r+0x22>
 80036d4:	1b9b      	subs	r3, r3, r6
 80036d6:	50a3      	str	r3, [r4, r2]
 80036d8:	e7ab      	b.n	8003632 <_malloc_r+0x22>
 80036da:	42a3      	cmp	r3, r4
 80036dc:	6862      	ldr	r2, [r4, #4]
 80036de:	d1dd      	bne.n	800369c <_malloc_r+0x8c>
 80036e0:	f8c8 2000 	str.w	r2, [r8]
 80036e4:	e7ec      	b.n	80036c0 <_malloc_r+0xb0>
 80036e6:	4623      	mov	r3, r4
 80036e8:	6864      	ldr	r4, [r4, #4]
 80036ea:	e7ac      	b.n	8003646 <_malloc_r+0x36>
 80036ec:	4634      	mov	r4, r6
 80036ee:	6876      	ldr	r6, [r6, #4]
 80036f0:	e7b4      	b.n	800365c <_malloc_r+0x4c>
 80036f2:	4613      	mov	r3, r2
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x80>
 80036f6:	230c      	movs	r3, #12
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4638      	mov	r0, r7
 80036fc:	f000 f80e 	bl	800371c <__malloc_unlock>
 8003700:	e797      	b.n	8003632 <_malloc_r+0x22>
 8003702:	6025      	str	r5, [r4, #0]
 8003704:	e7dc      	b.n	80036c0 <_malloc_r+0xb0>
 8003706:	605b      	str	r3, [r3, #4]
 8003708:	deff      	udf	#255	; 0xff
 800370a:	bf00      	nop
 800370c:	20000284 	.word	0x20000284

08003710 <__malloc_lock>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__malloc_lock+0x8>)
 8003712:	f7ff bf0f 	b.w	8003534 <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	20000280 	.word	0x20000280

0800371c <__malloc_unlock>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__malloc_unlock+0x8>)
 800371e:	f7ff bf0a 	b.w	8003536 <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	20000280 	.word	0x20000280

08003728 <_sungetc_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	1c4b      	adds	r3, r1, #1
 800372c:	4614      	mov	r4, r2
 800372e:	d103      	bne.n	8003738 <_sungetc_r+0x10>
 8003730:	f04f 35ff 	mov.w	r5, #4294967295
 8003734:	4628      	mov	r0, r5
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	8993      	ldrh	r3, [r2, #12]
 800373a:	f023 0320 	bic.w	r3, r3, #32
 800373e:	8193      	strh	r3, [r2, #12]
 8003740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	b2cd      	uxtb	r5, r1
 8003746:	b18b      	cbz	r3, 800376c <_sungetc_r+0x44>
 8003748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800374a:	4293      	cmp	r3, r2
 800374c:	dd08      	ble.n	8003760 <_sungetc_r+0x38>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	3301      	adds	r3, #1
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	e7e9      	b.n	8003734 <_sungetc_r+0xc>
 8003760:	4621      	mov	r1, r4
 8003762:	f000 fb3a 	bl	8003dda <__submore>
 8003766:	2800      	cmp	r0, #0
 8003768:	d0f1      	beq.n	800374e <_sungetc_r+0x26>
 800376a:	e7e1      	b.n	8003730 <_sungetc_r+0x8>
 800376c:	6921      	ldr	r1, [r4, #16]
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	b151      	cbz	r1, 8003788 <_sungetc_r+0x60>
 8003772:	4299      	cmp	r1, r3
 8003774:	d208      	bcs.n	8003788 <_sungetc_r+0x60>
 8003776:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800377a:	42a9      	cmp	r1, r5
 800377c:	d104      	bne.n	8003788 <_sungetc_r+0x60>
 800377e:	3b01      	subs	r3, #1
 8003780:	3201      	adds	r2, #1
 8003782:	6023      	str	r3, [r4, #0]
 8003784:	6062      	str	r2, [r4, #4]
 8003786:	e7d5      	b.n	8003734 <_sungetc_r+0xc>
 8003788:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800378c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003790:	6363      	str	r3, [r4, #52]	; 0x34
 8003792:	2303      	movs	r3, #3
 8003794:	63a3      	str	r3, [r4, #56]	; 0x38
 8003796:	4623      	mov	r3, r4
 8003798:	f803 5f46 	strb.w	r5, [r3, #70]!
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	e7dc      	b.n	800375c <_sungetc_r+0x34>

080037a2 <__ssrefill_r>:
 80037a2:	b510      	push	{r4, lr}
 80037a4:	460c      	mov	r4, r1
 80037a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80037a8:	b169      	cbz	r1, 80037c6 <__ssrefill_r+0x24>
 80037aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ae:	4299      	cmp	r1, r3
 80037b0:	d001      	beq.n	80037b6 <__ssrefill_r+0x14>
 80037b2:	f7ff fec1 	bl	8003538 <_free_r>
 80037b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037b8:	6063      	str	r3, [r4, #4]
 80037ba:	2000      	movs	r0, #0
 80037bc:	6360      	str	r0, [r4, #52]	; 0x34
 80037be:	b113      	cbz	r3, 80037c6 <__ssrefill_r+0x24>
 80037c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	6063      	str	r3, [r4, #4]
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f043 0320 	orr.w	r3, r3, #32
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
 80037da:	e7f3      	b.n	80037c4 <__ssrefill_r+0x22>

080037dc <__ssvfiscanf_r>:
 80037dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e0:	460c      	mov	r4, r1
 80037e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80037e6:	2100      	movs	r1, #0
 80037e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80037ec:	49a6      	ldr	r1, [pc, #664]	; (8003a88 <__ssvfiscanf_r+0x2ac>)
 80037ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80037f0:	f10d 0804 	add.w	r8, sp, #4
 80037f4:	49a5      	ldr	r1, [pc, #660]	; (8003a8c <__ssvfiscanf_r+0x2b0>)
 80037f6:	4fa6      	ldr	r7, [pc, #664]	; (8003a90 <__ssvfiscanf_r+0x2b4>)
 80037f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003a94 <__ssvfiscanf_r+0x2b8>
 80037fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003800:	4606      	mov	r6, r0
 8003802:	91a1      	str	r1, [sp, #644]	; 0x284
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	7813      	ldrb	r3, [r2, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 815a 	beq.w	8003ac2 <__ssvfiscanf_r+0x2e6>
 800380e:	5cf9      	ldrb	r1, [r7, r3]
 8003810:	f011 0108 	ands.w	r1, r1, #8
 8003814:	f102 0501 	add.w	r5, r2, #1
 8003818:	d019      	beq.n	800384e <__ssvfiscanf_r+0x72>
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	dd0f      	ble.n	8003840 <__ssvfiscanf_r+0x64>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	5cba      	ldrb	r2, [r7, r2]
 8003826:	0712      	lsls	r2, r2, #28
 8003828:	d401      	bmi.n	800382e <__ssvfiscanf_r+0x52>
 800382a:	462a      	mov	r2, r5
 800382c:	e7eb      	b.n	8003806 <__ssvfiscanf_r+0x2a>
 800382e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003830:	3201      	adds	r2, #1
 8003832:	9245      	str	r2, [sp, #276]	; 0x114
 8003834:	6862      	ldr	r2, [r4, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	3a01      	subs	r2, #1
 800383a:	6062      	str	r2, [r4, #4]
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	e7ec      	b.n	800381a <__ssvfiscanf_r+0x3e>
 8003840:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003842:	4621      	mov	r1, r4
 8003844:	4630      	mov	r0, r6
 8003846:	4798      	blx	r3
 8003848:	2800      	cmp	r0, #0
 800384a:	d0e9      	beq.n	8003820 <__ssvfiscanf_r+0x44>
 800384c:	e7ed      	b.n	800382a <__ssvfiscanf_r+0x4e>
 800384e:	2b25      	cmp	r3, #37	; 0x25
 8003850:	d012      	beq.n	8003878 <__ssvfiscanf_r+0x9c>
 8003852:	469a      	mov	sl, r3
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f340 8091 	ble.w	800397e <__ssvfiscanf_r+0x1a2>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	7813      	ldrb	r3, [r2, #0]
 8003860:	4553      	cmp	r3, sl
 8003862:	f040 812e 	bne.w	8003ac2 <__ssvfiscanf_r+0x2e6>
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	3b01      	subs	r3, #1
 800386a:	6063      	str	r3, [r4, #4]
 800386c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800386e:	3201      	adds	r2, #1
 8003870:	3301      	adds	r3, #1
 8003872:	6022      	str	r2, [r4, #0]
 8003874:	9345      	str	r3, [sp, #276]	; 0x114
 8003876:	e7d8      	b.n	800382a <__ssvfiscanf_r+0x4e>
 8003878:	9141      	str	r1, [sp, #260]	; 0x104
 800387a:	9143      	str	r1, [sp, #268]	; 0x10c
 800387c:	7853      	ldrb	r3, [r2, #1]
 800387e:	2b2a      	cmp	r3, #42	; 0x2a
 8003880:	bf02      	ittt	eq
 8003882:	2310      	moveq	r3, #16
 8003884:	1c95      	addeq	r5, r2, #2
 8003886:	9341      	streq	r3, [sp, #260]	; 0x104
 8003888:	220a      	movs	r2, #10
 800388a:	46aa      	mov	sl, r5
 800388c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003890:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003894:	2b09      	cmp	r3, #9
 8003896:	d91c      	bls.n	80038d2 <__ssvfiscanf_r+0xf6>
 8003898:	487e      	ldr	r0, [pc, #504]	; (8003a94 <__ssvfiscanf_r+0x2b8>)
 800389a:	2203      	movs	r2, #3
 800389c:	f7fc fcc0 	bl	8000220 <memchr>
 80038a0:	b138      	cbz	r0, 80038b2 <__ssvfiscanf_r+0xd6>
 80038a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80038a4:	eba0 0009 	sub.w	r0, r0, r9
 80038a8:	2301      	movs	r3, #1
 80038aa:	4083      	lsls	r3, r0
 80038ac:	4313      	orrs	r3, r2
 80038ae:	9341      	str	r3, [sp, #260]	; 0x104
 80038b0:	4655      	mov	r5, sl
 80038b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038b6:	2b78      	cmp	r3, #120	; 0x78
 80038b8:	d806      	bhi.n	80038c8 <__ssvfiscanf_r+0xec>
 80038ba:	2b57      	cmp	r3, #87	; 0x57
 80038bc:	d810      	bhi.n	80038e0 <__ssvfiscanf_r+0x104>
 80038be:	2b25      	cmp	r3, #37	; 0x25
 80038c0:	d0c7      	beq.n	8003852 <__ssvfiscanf_r+0x76>
 80038c2:	d857      	bhi.n	8003974 <__ssvfiscanf_r+0x198>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d065      	beq.n	8003994 <__ssvfiscanf_r+0x1b8>
 80038c8:	2303      	movs	r3, #3
 80038ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80038cc:	230a      	movs	r3, #10
 80038ce:	9342      	str	r3, [sp, #264]	; 0x108
 80038d0:	e076      	b.n	80039c0 <__ssvfiscanf_r+0x1e4>
 80038d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80038d4:	fb02 1103 	mla	r1, r2, r3, r1
 80038d8:	3930      	subs	r1, #48	; 0x30
 80038da:	9143      	str	r1, [sp, #268]	; 0x10c
 80038dc:	4655      	mov	r5, sl
 80038de:	e7d4      	b.n	800388a <__ssvfiscanf_r+0xae>
 80038e0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80038e4:	2a20      	cmp	r2, #32
 80038e6:	d8ef      	bhi.n	80038c8 <__ssvfiscanf_r+0xec>
 80038e8:	a101      	add	r1, pc, #4	; (adr r1, 80038f0 <__ssvfiscanf_r+0x114>)
 80038ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	080039a3 	.word	0x080039a3
 80038f4:	080038c9 	.word	0x080038c9
 80038f8:	080038c9 	.word	0x080038c9
 80038fc:	08003a01 	.word	0x08003a01
 8003900:	080038c9 	.word	0x080038c9
 8003904:	080038c9 	.word	0x080038c9
 8003908:	080038c9 	.word	0x080038c9
 800390c:	080038c9 	.word	0x080038c9
 8003910:	080038c9 	.word	0x080038c9
 8003914:	080038c9 	.word	0x080038c9
 8003918:	080038c9 	.word	0x080038c9
 800391c:	08003a17 	.word	0x08003a17
 8003920:	080039fd 	.word	0x080039fd
 8003924:	0800397b 	.word	0x0800397b
 8003928:	0800397b 	.word	0x0800397b
 800392c:	0800397b 	.word	0x0800397b
 8003930:	080038c9 	.word	0x080038c9
 8003934:	080039b9 	.word	0x080039b9
 8003938:	080038c9 	.word	0x080038c9
 800393c:	080038c9 	.word	0x080038c9
 8003940:	080038c9 	.word	0x080038c9
 8003944:	080038c9 	.word	0x080038c9
 8003948:	08003a27 	.word	0x08003a27
 800394c:	080039f5 	.word	0x080039f5
 8003950:	0800399b 	.word	0x0800399b
 8003954:	080038c9 	.word	0x080038c9
 8003958:	080038c9 	.word	0x080038c9
 800395c:	08003a23 	.word	0x08003a23
 8003960:	080038c9 	.word	0x080038c9
 8003964:	080039fd 	.word	0x080039fd
 8003968:	080038c9 	.word	0x080038c9
 800396c:	080038c9 	.word	0x080038c9
 8003970:	080039a3 	.word	0x080039a3
 8003974:	3b45      	subs	r3, #69	; 0x45
 8003976:	2b02      	cmp	r3, #2
 8003978:	d8a6      	bhi.n	80038c8 <__ssvfiscanf_r+0xec>
 800397a:	2305      	movs	r3, #5
 800397c:	e01f      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 800397e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003980:	4621      	mov	r1, r4
 8003982:	4630      	mov	r0, r6
 8003984:	4798      	blx	r3
 8003986:	2800      	cmp	r0, #0
 8003988:	f43f af68 	beq.w	800385c <__ssvfiscanf_r+0x80>
 800398c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800398e:	2800      	cmp	r0, #0
 8003990:	f040 808d 	bne.w	8003aae <__ssvfiscanf_r+0x2d2>
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	e08f      	b.n	8003aba <__ssvfiscanf_r+0x2de>
 800399a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800399c:	f042 0220 	orr.w	r2, r2, #32
 80039a0:	9241      	str	r2, [sp, #260]	; 0x104
 80039a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	9241      	str	r2, [sp, #260]	; 0x104
 80039aa:	2210      	movs	r2, #16
 80039ac:	2b6f      	cmp	r3, #111	; 0x6f
 80039ae:	9242      	str	r2, [sp, #264]	; 0x108
 80039b0:	bf34      	ite	cc
 80039b2:	2303      	movcc	r3, #3
 80039b4:	2304      	movcs	r3, #4
 80039b6:	e002      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 80039b8:	2300      	movs	r3, #0
 80039ba:	9342      	str	r3, [sp, #264]	; 0x108
 80039bc:	2303      	movs	r3, #3
 80039be:	9347      	str	r3, [sp, #284]	; 0x11c
 80039c0:	6863      	ldr	r3, [r4, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dd3d      	ble.n	8003a42 <__ssvfiscanf_r+0x266>
 80039c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039c8:	0659      	lsls	r1, r3, #25
 80039ca:	d404      	bmi.n	80039d6 <__ssvfiscanf_r+0x1fa>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	5cba      	ldrb	r2, [r7, r2]
 80039d2:	0712      	lsls	r2, r2, #28
 80039d4:	d43c      	bmi.n	8003a50 <__ssvfiscanf_r+0x274>
 80039d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80039d8:	2b02      	cmp	r3, #2
 80039da:	dc4b      	bgt.n	8003a74 <__ssvfiscanf_r+0x298>
 80039dc:	466b      	mov	r3, sp
 80039de:	4622      	mov	r2, r4
 80039e0:	a941      	add	r1, sp, #260	; 0x104
 80039e2:	4630      	mov	r0, r6
 80039e4:	f000 f872 	bl	8003acc <_scanf_chars>
 80039e8:	2801      	cmp	r0, #1
 80039ea:	d06a      	beq.n	8003ac2 <__ssvfiscanf_r+0x2e6>
 80039ec:	2802      	cmp	r0, #2
 80039ee:	f47f af1c 	bne.w	800382a <__ssvfiscanf_r+0x4e>
 80039f2:	e7cb      	b.n	800398c <__ssvfiscanf_r+0x1b0>
 80039f4:	2308      	movs	r3, #8
 80039f6:	9342      	str	r3, [sp, #264]	; 0x108
 80039f8:	2304      	movs	r3, #4
 80039fa:	e7e0      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 80039fc:	220a      	movs	r2, #10
 80039fe:	e7d5      	b.n	80039ac <__ssvfiscanf_r+0x1d0>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4640      	mov	r0, r8
 8003a04:	f000 f9b0 	bl	8003d68 <__sccl>
 8003a08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0e:	9341      	str	r3, [sp, #260]	; 0x104
 8003a10:	4605      	mov	r5, r0
 8003a12:	2301      	movs	r3, #1
 8003a14:	e7d3      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 8003a16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1c:	9341      	str	r3, [sp, #260]	; 0x104
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e7cd      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e7cb      	b.n	80039be <__ssvfiscanf_r+0x1e2>
 8003a26:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003a28:	06c3      	lsls	r3, r0, #27
 8003a2a:	f53f aefe 	bmi.w	800382a <__ssvfiscanf_r+0x4e>
 8003a2e:	9b00      	ldr	r3, [sp, #0]
 8003a30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a32:	1d19      	adds	r1, r3, #4
 8003a34:	9100      	str	r1, [sp, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	07c0      	lsls	r0, r0, #31
 8003a3a:	bf4c      	ite	mi
 8003a3c:	801a      	strhmi	r2, [r3, #0]
 8003a3e:	601a      	strpl	r2, [r3, #0]
 8003a40:	e6f3      	b.n	800382a <__ssvfiscanf_r+0x4e>
 8003a42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a44:	4621      	mov	r1, r4
 8003a46:	4630      	mov	r0, r6
 8003a48:	4798      	blx	r3
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d0bb      	beq.n	80039c6 <__ssvfiscanf_r+0x1ea>
 8003a4e:	e79d      	b.n	800398c <__ssvfiscanf_r+0x1b0>
 8003a50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a52:	3201      	adds	r2, #1
 8003a54:	9245      	str	r2, [sp, #276]	; 0x114
 8003a56:	6862      	ldr	r2, [r4, #4]
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	6062      	str	r2, [r4, #4]
 8003a5e:	dd02      	ble.n	8003a66 <__ssvfiscanf_r+0x28a>
 8003a60:	3301      	adds	r3, #1
 8003a62:	6023      	str	r3, [r4, #0]
 8003a64:	e7b2      	b.n	80039cc <__ssvfiscanf_r+0x1f0>
 8003a66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	4798      	blx	r3
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d0ac      	beq.n	80039cc <__ssvfiscanf_r+0x1f0>
 8003a72:	e78b      	b.n	800398c <__ssvfiscanf_r+0x1b0>
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	dc0f      	bgt.n	8003a98 <__ssvfiscanf_r+0x2bc>
 8003a78:	466b      	mov	r3, sp
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	a941      	add	r1, sp, #260	; 0x104
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f000 f87e 	bl	8003b80 <_scanf_i>
 8003a84:	e7b0      	b.n	80039e8 <__ssvfiscanf_r+0x20c>
 8003a86:	bf00      	nop
 8003a88:	08003729 	.word	0x08003729
 8003a8c:	080037a3 	.word	0x080037a3
 8003a90:	080041c8 	.word	0x080041c8
 8003a94:	080041a8 	.word	0x080041a8
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <__ssvfiscanf_r+0x2ec>)
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f43f aec5 	beq.w	800382a <__ssvfiscanf_r+0x4e>
 8003aa0:	466b      	mov	r3, sp
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	a941      	add	r1, sp, #260	; 0x104
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f3af 8000 	nop.w
 8003aac:	e79c      	b.n	80039e8 <__ssvfiscanf_r+0x20c>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ab4:	bf18      	it	ne
 8003ab6:	f04f 30ff 	movne.w	r0, #4294967295
 8003aba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003ac4:	e7f9      	b.n	8003aba <__ssvfiscanf_r+0x2de>
 8003ac6:	bf00      	nop
 8003ac8:	00000000 	.word	0x00000000

08003acc <_scanf_chars>:
 8003acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	688a      	ldr	r2, [r1, #8]
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b932      	cbnz	r2, 8003ae8 <_scanf_chars+0x1c>
 8003ada:	698a      	ldr	r2, [r1, #24]
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2201      	moveq	r2, #1
 8003ae2:	f04f 32ff 	movne.w	r2, #4294967295
 8003ae6:	608a      	str	r2, [r1, #8]
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003b7c <_scanf_chars+0xb0>
 8003aee:	06d1      	lsls	r1, r2, #27
 8003af0:	bf5f      	itttt	pl
 8003af2:	681a      	ldrpl	r2, [r3, #0]
 8003af4:	1d11      	addpl	r1, r2, #4
 8003af6:	6019      	strpl	r1, [r3, #0]
 8003af8:	6816      	ldrpl	r6, [r2, #0]
 8003afa:	2700      	movs	r7, #0
 8003afc:	69a0      	ldr	r0, [r4, #24]
 8003afe:	b188      	cbz	r0, 8003b24 <_scanf_chars+0x58>
 8003b00:	2801      	cmp	r0, #1
 8003b02:	d107      	bne.n	8003b14 <_scanf_chars+0x48>
 8003b04:	682a      	ldr	r2, [r5, #0]
 8003b06:	7811      	ldrb	r1, [r2, #0]
 8003b08:	6962      	ldr	r2, [r4, #20]
 8003b0a:	5c52      	ldrb	r2, [r2, r1]
 8003b0c:	b952      	cbnz	r2, 8003b24 <_scanf_chars+0x58>
 8003b0e:	2f00      	cmp	r7, #0
 8003b10:	d031      	beq.n	8003b76 <_scanf_chars+0xaa>
 8003b12:	e022      	b.n	8003b5a <_scanf_chars+0x8e>
 8003b14:	2802      	cmp	r0, #2
 8003b16:	d120      	bne.n	8003b5a <_scanf_chars+0x8e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003b20:	071b      	lsls	r3, r3, #28
 8003b22:	d41a      	bmi.n	8003b5a <_scanf_chars+0x8e>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	06da      	lsls	r2, r3, #27
 8003b28:	bf5e      	ittt	pl
 8003b2a:	682b      	ldrpl	r3, [r5, #0]
 8003b2c:	781b      	ldrbpl	r3, [r3, #0]
 8003b2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003b32:	682a      	ldr	r2, [r5, #0]
 8003b34:	686b      	ldr	r3, [r5, #4]
 8003b36:	3201      	adds	r2, #1
 8003b38:	602a      	str	r2, [r5, #0]
 8003b3a:	68a2      	ldr	r2, [r4, #8]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	606b      	str	r3, [r5, #4]
 8003b42:	3701      	adds	r7, #1
 8003b44:	60a2      	str	r2, [r4, #8]
 8003b46:	b142      	cbz	r2, 8003b5a <_scanf_chars+0x8e>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dcd7      	bgt.n	8003afc <_scanf_chars+0x30>
 8003b4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b50:	4629      	mov	r1, r5
 8003b52:	4640      	mov	r0, r8
 8003b54:	4798      	blx	r3
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0d0      	beq.n	8003afc <_scanf_chars+0x30>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f013 0310 	ands.w	r3, r3, #16
 8003b60:	d105      	bne.n	8003b6e <_scanf_chars+0xa2>
 8003b62:	68e2      	ldr	r2, [r4, #12]
 8003b64:	3201      	adds	r2, #1
 8003b66:	60e2      	str	r2, [r4, #12]
 8003b68:	69a2      	ldr	r2, [r4, #24]
 8003b6a:	b102      	cbz	r2, 8003b6e <_scanf_chars+0xa2>
 8003b6c:	7033      	strb	r3, [r6, #0]
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	443b      	add	r3, r7
 8003b72:	6123      	str	r3, [r4, #16]
 8003b74:	2000      	movs	r0, #0
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	bf00      	nop
 8003b7c:	080041c8 	.word	0x080041c8

08003b80 <_scanf_i>:
 8003b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	4698      	mov	r8, r3
 8003b86:	4b74      	ldr	r3, [pc, #464]	; (8003d58 <_scanf_i+0x1d8>)
 8003b88:	460c      	mov	r4, r1
 8003b8a:	4682      	mov	sl, r0
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b92:	b087      	sub	sp, #28
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b9a:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <_scanf_i+0x1dc>)
 8003b9c:	69a1      	ldr	r1, [r4, #24]
 8003b9e:	4a70      	ldr	r2, [pc, #448]	; (8003d60 <_scanf_i+0x1e0>)
 8003ba0:	2903      	cmp	r1, #3
 8003ba2:	bf18      	it	ne
 8003ba4:	461a      	movne	r2, r3
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	9201      	str	r2, [sp, #4]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003bb0:	bf88      	it	hi
 8003bb2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003bb6:	4627      	mov	r7, r4
 8003bb8:	bf82      	ittt	hi
 8003bba:	eb03 0905 	addhi.w	r9, r3, r5
 8003bbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003bc2:	60a3      	strhi	r3, [r4, #8]
 8003bc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003bc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003bcc:	bf98      	it	ls
 8003bce:	f04f 0900 	movls.w	r9, #0
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	463d      	mov	r5, r7
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	6831      	ldr	r1, [r6, #0]
 8003bdc:	ab03      	add	r3, sp, #12
 8003bde:	7809      	ldrb	r1, [r1, #0]
 8003be0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f7fc fb1b 	bl	8000220 <memchr>
 8003bea:	b328      	cbz	r0, 8003c38 <_scanf_i+0xb8>
 8003bec:	f1bb 0f01 	cmp.w	fp, #1
 8003bf0:	d159      	bne.n	8003ca6 <_scanf_i+0x126>
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	b92a      	cbnz	r2, 8003c02 <_scanf_i+0x82>
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfe:	6063      	str	r3, [r4, #4]
 8003c00:	6022      	str	r2, [r4, #0]
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	68a2      	ldr	r2, [r4, #8]
 8003c0c:	1e51      	subs	r1, r2, #1
 8003c0e:	60a1      	str	r1, [r4, #8]
 8003c10:	b192      	cbz	r2, 8003c38 <_scanf_i+0xb8>
 8003c12:	6832      	ldr	r2, [r6, #0]
 8003c14:	1c51      	adds	r1, r2, #1
 8003c16:	6031      	str	r1, [r6, #0]
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	f805 2b01 	strb.w	r2, [r5], #1
 8003c1e:	6872      	ldr	r2, [r6, #4]
 8003c20:	3a01      	subs	r2, #1
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	6072      	str	r2, [r6, #4]
 8003c26:	dc07      	bgt.n	8003c38 <_scanf_i+0xb8>
 8003c28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4650      	mov	r0, sl
 8003c30:	4790      	blx	r2
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f040 8085 	bne.w	8003d42 <_scanf_i+0x1c2>
 8003c38:	f10b 0b01 	add.w	fp, fp, #1
 8003c3c:	f1bb 0f03 	cmp.w	fp, #3
 8003c40:	d1cb      	bne.n	8003bda <_scanf_i+0x5a>
 8003c42:	6863      	ldr	r3, [r4, #4]
 8003c44:	b90b      	cbnz	r3, 8003c4a <_scanf_i+0xca>
 8003c46:	230a      	movs	r3, #10
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	4945      	ldr	r1, [pc, #276]	; (8003d64 <_scanf_i+0x1e4>)
 8003c4e:	6960      	ldr	r0, [r4, #20]
 8003c50:	1ac9      	subs	r1, r1, r3
 8003c52:	f000 f889 	bl	8003d68 <__sccl>
 8003c56:	f04f 0b00 	mov.w	fp, #0
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03d      	beq.n	8003cde <_scanf_i+0x15e>
 8003c62:	6831      	ldr	r1, [r6, #0]
 8003c64:	6960      	ldr	r0, [r4, #20]
 8003c66:	f891 c000 	ldrb.w	ip, [r1]
 8003c6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d035      	beq.n	8003cde <_scanf_i+0x15e>
 8003c72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003c76:	d124      	bne.n	8003cc2 <_scanf_i+0x142>
 8003c78:	0510      	lsls	r0, r2, #20
 8003c7a:	d522      	bpl.n	8003cc2 <_scanf_i+0x142>
 8003c7c:	f10b 0b01 	add.w	fp, fp, #1
 8003c80:	f1b9 0f00 	cmp.w	r9, #0
 8003c84:	d003      	beq.n	8003c8e <_scanf_i+0x10e>
 8003c86:	3301      	adds	r3, #1
 8003c88:	f109 39ff 	add.w	r9, r9, #4294967295
 8003c8c:	60a3      	str	r3, [r4, #8]
 8003c8e:	6873      	ldr	r3, [r6, #4]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	6073      	str	r3, [r6, #4]
 8003c96:	dd1b      	ble.n	8003cd0 <_scanf_i+0x150>
 8003c98:	6833      	ldr	r3, [r6, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	6033      	str	r3, [r6, #0]
 8003c9e:	68a3      	ldr	r3, [r4, #8]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	e7d9      	b.n	8003c5a <_scanf_i+0xda>
 8003ca6:	f1bb 0f02 	cmp.w	fp, #2
 8003caa:	d1ae      	bne.n	8003c0a <_scanf_i+0x8a>
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003cb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003cb6:	d1bf      	bne.n	8003c38 <_scanf_i+0xb8>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc0:	e7a2      	b.n	8003c08 <_scanf_i+0x88>
 8003cc2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003cc6:	6022      	str	r2, [r4, #0]
 8003cc8:	780b      	ldrb	r3, [r1, #0]
 8003cca:	f805 3b01 	strb.w	r3, [r5], #1
 8003cce:	e7de      	b.n	8003c8e <_scanf_i+0x10e>
 8003cd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4650      	mov	r0, sl
 8003cd8:	4798      	blx	r3
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d0df      	beq.n	8003c9e <_scanf_i+0x11e>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	05d9      	lsls	r1, r3, #23
 8003ce2:	d50d      	bpl.n	8003d00 <_scanf_i+0x180>
 8003ce4:	42bd      	cmp	r5, r7
 8003ce6:	d909      	bls.n	8003cfc <_scanf_i+0x17c>
 8003ce8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cf0:	4632      	mov	r2, r6
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	4798      	blx	r3
 8003cf6:	f105 39ff 	add.w	r9, r5, #4294967295
 8003cfa:	464d      	mov	r5, r9
 8003cfc:	42bd      	cmp	r5, r7
 8003cfe:	d028      	beq.n	8003d52 <_scanf_i+0x1d2>
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	f012 0210 	ands.w	r2, r2, #16
 8003d06:	d113      	bne.n	8003d30 <_scanf_i+0x1b0>
 8003d08:	702a      	strb	r2, [r5, #0]
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	9e01      	ldr	r6, [sp, #4]
 8003d0e:	4639      	mov	r1, r7
 8003d10:	4650      	mov	r0, sl
 8003d12:	47b0      	blx	r6
 8003d14:	f8d8 3000 	ldr.w	r3, [r8]
 8003d18:	6821      	ldr	r1, [r4, #0]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	f8c8 2000 	str.w	r2, [r8]
 8003d20:	f011 0f20 	tst.w	r1, #32
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	d00f      	beq.n	8003d48 <_scanf_i+0x1c8>
 8003d28:	6018      	str	r0, [r3, #0]
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60e3      	str	r3, [r4, #12]
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	1bed      	subs	r5, r5, r7
 8003d34:	445d      	add	r5, fp
 8003d36:	442b      	add	r3, r5
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	b007      	add	sp, #28
 8003d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d42:	f04f 0b00 	mov.w	fp, #0
 8003d46:	e7ca      	b.n	8003cde <_scanf_i+0x15e>
 8003d48:	07ca      	lsls	r2, r1, #31
 8003d4a:	bf4c      	ite	mi
 8003d4c:	8018      	strhmi	r0, [r3, #0]
 8003d4e:	6018      	strpl	r0, [r3, #0]
 8003d50:	e7eb      	b.n	8003d2a <_scanf_i+0x1aa>
 8003d52:	2001      	movs	r0, #1
 8003d54:	e7f2      	b.n	8003d3c <_scanf_i+0x1bc>
 8003d56:	bf00      	nop
 8003d58:	08004184 	.word	0x08004184
 8003d5c:	080040d9 	.word	0x080040d9
 8003d60:	08003ff1 	.word	0x08003ff1
 8003d64:	080041bc 	.word	0x080041bc

08003d68 <__sccl>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	780b      	ldrb	r3, [r1, #0]
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	2b5e      	cmp	r3, #94	; 0x5e
 8003d70:	bf0b      	itete	eq
 8003d72:	784b      	ldrbeq	r3, [r1, #1]
 8003d74:	1c4a      	addne	r2, r1, #1
 8003d76:	1c8a      	addeq	r2, r1, #2
 8003d78:	2100      	movne	r1, #0
 8003d7a:	bf08      	it	eq
 8003d7c:	2101      	moveq	r1, #1
 8003d7e:	3801      	subs	r0, #1
 8003d80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003d84:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003d88:	42a8      	cmp	r0, r5
 8003d8a:	d1fb      	bne.n	8003d84 <__sccl+0x1c>
 8003d8c:	b90b      	cbnz	r3, 8003d92 <__sccl+0x2a>
 8003d8e:	1e50      	subs	r0, r2, #1
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	f081 0101 	eor.w	r1, r1, #1
 8003d96:	54e1      	strb	r1, [r4, r3]
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003da0:	2d2d      	cmp	r5, #45	; 0x2d
 8003da2:	d005      	beq.n	8003db0 <__sccl+0x48>
 8003da4:	2d5d      	cmp	r5, #93	; 0x5d
 8003da6:	d016      	beq.n	8003dd6 <__sccl+0x6e>
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d0f1      	beq.n	8003d90 <__sccl+0x28>
 8003dac:	462b      	mov	r3, r5
 8003dae:	e7f2      	b.n	8003d96 <__sccl+0x2e>
 8003db0:	7846      	ldrb	r6, [r0, #1]
 8003db2:	2e5d      	cmp	r6, #93	; 0x5d
 8003db4:	d0fa      	beq.n	8003dac <__sccl+0x44>
 8003db6:	42b3      	cmp	r3, r6
 8003db8:	dcf8      	bgt.n	8003dac <__sccl+0x44>
 8003dba:	3002      	adds	r0, #2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	3201      	adds	r2, #1
 8003dc0:	4296      	cmp	r6, r2
 8003dc2:	54a1      	strb	r1, [r4, r2]
 8003dc4:	dcfb      	bgt.n	8003dbe <__sccl+0x56>
 8003dc6:	1af2      	subs	r2, r6, r3
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	1c5d      	adds	r5, r3, #1
 8003dcc:	42b3      	cmp	r3, r6
 8003dce:	bfa8      	it	ge
 8003dd0:	2200      	movge	r2, #0
 8003dd2:	18ab      	adds	r3, r5, r2
 8003dd4:	e7e1      	b.n	8003d9a <__sccl+0x32>
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	e7da      	b.n	8003d90 <__sccl+0x28>

08003dda <__submore>:
 8003dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dde:	460c      	mov	r4, r1
 8003de0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003de2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de6:	4299      	cmp	r1, r3
 8003de8:	d11d      	bne.n	8003e26 <__submore+0x4c>
 8003dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dee:	f7ff fc0f 	bl	8003610 <_malloc_r>
 8003df2:	b918      	cbnz	r0, 8003dfc <__submore+0x22>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e00:	63a3      	str	r3, [r4, #56]	; 0x38
 8003e02:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003e06:	6360      	str	r0, [r4, #52]	; 0x34
 8003e08:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003e0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e10:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003e14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e18:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003e1c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003e20:	6020      	str	r0, [r4, #0]
 8003e22:	2000      	movs	r0, #0
 8003e24:	e7e8      	b.n	8003df8 <__submore+0x1e>
 8003e26:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003e28:	0077      	lsls	r7, r6, #1
 8003e2a:	463a      	mov	r2, r7
 8003e2c:	f000 f82e 	bl	8003e8c <_realloc_r>
 8003e30:	4605      	mov	r5, r0
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d0de      	beq.n	8003df4 <__submore+0x1a>
 8003e36:	eb00 0806 	add.w	r8, r0, r6
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f000 f816 	bl	8003e70 <memcpy>
 8003e44:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003e48:	f8c4 8000 	str.w	r8, [r4]
 8003e4c:	e7e9      	b.n	8003e22 <__submore+0x48>
	...

08003e50 <_sbrk_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d06      	ldr	r5, [pc, #24]	; (8003e6c <_sbrk_r+0x1c>)
 8003e54:	2300      	movs	r3, #0
 8003e56:	4604      	mov	r4, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	f7fd f83e 	bl	8000edc <_sbrk>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_sbrk_r+0x1a>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_sbrk_r+0x1a>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	2000027c 	.word	0x2000027c

08003e70 <memcpy>:
 8003e70:	440a      	add	r2, r1
 8003e72:	4291      	cmp	r1, r2
 8003e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e78:	d100      	bne.n	8003e7c <memcpy+0xc>
 8003e7a:	4770      	bx	lr
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e86:	4291      	cmp	r1, r2
 8003e88:	d1f9      	bne.n	8003e7e <memcpy+0xe>
 8003e8a:	bd10      	pop	{r4, pc}

08003e8c <_realloc_r>:
 8003e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	4680      	mov	r8, r0
 8003e92:	4614      	mov	r4, r2
 8003e94:	460e      	mov	r6, r1
 8003e96:	b921      	cbnz	r1, 8003ea2 <_realloc_r+0x16>
 8003e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	f7ff bbb7 	b.w	8003610 <_malloc_r>
 8003ea2:	b92a      	cbnz	r2, 8003eb0 <_realloc_r+0x24>
 8003ea4:	f7ff fb48 	bl	8003538 <_free_r>
 8003ea8:	4625      	mov	r5, r4
 8003eaa:	4628      	mov	r0, r5
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	f000 f914 	bl	80040dc <_malloc_usable_size_r>
 8003eb4:	4284      	cmp	r4, r0
 8003eb6:	4607      	mov	r7, r0
 8003eb8:	d802      	bhi.n	8003ec0 <_realloc_r+0x34>
 8003eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ebe:	d812      	bhi.n	8003ee6 <_realloc_r+0x5a>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7ff fba4 	bl	8003610 <_malloc_r>
 8003ec8:	4605      	mov	r5, r0
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d0ed      	beq.n	8003eaa <_realloc_r+0x1e>
 8003ece:	42bc      	cmp	r4, r7
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	bf28      	it	cs
 8003ed6:	463a      	movcs	r2, r7
 8003ed8:	f7ff ffca 	bl	8003e70 <memcpy>
 8003edc:	4631      	mov	r1, r6
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7ff fb2a 	bl	8003538 <_free_r>
 8003ee4:	e7e1      	b.n	8003eaa <_realloc_r+0x1e>
 8003ee6:	4635      	mov	r5, r6
 8003ee8:	e7df      	b.n	8003eaa <_realloc_r+0x1e>
	...

08003eec <_strtol_l.constprop.0>:
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef2:	d001      	beq.n	8003ef8 <_strtol_l.constprop.0+0xc>
 8003ef4:	2b24      	cmp	r3, #36	; 0x24
 8003ef6:	d906      	bls.n	8003f06 <_strtol_l.constprop.0+0x1a>
 8003ef8:	f7ff faf2 	bl	80034e0 <__errno>
 8003efc:	2316      	movs	r3, #22
 8003efe:	6003      	str	r3, [r0, #0]
 8003f00:	2000      	movs	r0, #0
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fec <_strtol_l.constprop.0+0x100>
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	462e      	mov	r6, r5
 8003f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003f16:	f017 0708 	ands.w	r7, r7, #8
 8003f1a:	d1f7      	bne.n	8003f0c <_strtol_l.constprop.0+0x20>
 8003f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8003f1e:	d132      	bne.n	8003f86 <_strtol_l.constprop.0+0x9a>
 8003f20:	782c      	ldrb	r4, [r5, #0]
 8003f22:	2701      	movs	r7, #1
 8003f24:	1cb5      	adds	r5, r6, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05b      	beq.n	8003fe2 <_strtol_l.constprop.0+0xf6>
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d109      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003f2e:	2c30      	cmp	r4, #48	; 0x30
 8003f30:	d107      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003f32:	782c      	ldrb	r4, [r5, #0]
 8003f34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f38:	2c58      	cmp	r4, #88	; 0x58
 8003f3a:	d14d      	bne.n	8003fd8 <_strtol_l.constprop.0+0xec>
 8003f3c:	786c      	ldrb	r4, [r5, #1]
 8003f3e:	2310      	movs	r3, #16
 8003f40:	3502      	adds	r5, #2
 8003f42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f46:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f4a:	f04f 0e00 	mov.w	lr, #0
 8003f4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f52:	4676      	mov	r6, lr
 8003f54:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f5c:	f1bc 0f09 	cmp.w	ip, #9
 8003f60:	d816      	bhi.n	8003f90 <_strtol_l.constprop.0+0xa4>
 8003f62:	4664      	mov	r4, ip
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	dd24      	ble.n	8003fb2 <_strtol_l.constprop.0+0xc6>
 8003f68:	f1be 3fff 	cmp.w	lr, #4294967295
 8003f6c:	d008      	beq.n	8003f80 <_strtol_l.constprop.0+0x94>
 8003f6e:	45b1      	cmp	r9, r6
 8003f70:	d31c      	bcc.n	8003fac <_strtol_l.constprop.0+0xc0>
 8003f72:	d101      	bne.n	8003f78 <_strtol_l.constprop.0+0x8c>
 8003f74:	45a2      	cmp	sl, r4
 8003f76:	db19      	blt.n	8003fac <_strtol_l.constprop.0+0xc0>
 8003f78:	fb06 4603 	mla	r6, r6, r3, r4
 8003f7c:	f04f 0e01 	mov.w	lr, #1
 8003f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f84:	e7e8      	b.n	8003f58 <_strtol_l.constprop.0+0x6c>
 8003f86:	2c2b      	cmp	r4, #43	; 0x2b
 8003f88:	bf04      	itt	eq
 8003f8a:	782c      	ldrbeq	r4, [r5, #0]
 8003f8c:	1cb5      	addeq	r5, r6, #2
 8003f8e:	e7ca      	b.n	8003f26 <_strtol_l.constprop.0+0x3a>
 8003f90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003f94:	f1bc 0f19 	cmp.w	ip, #25
 8003f98:	d801      	bhi.n	8003f9e <_strtol_l.constprop.0+0xb2>
 8003f9a:	3c37      	subs	r4, #55	; 0x37
 8003f9c:	e7e2      	b.n	8003f64 <_strtol_l.constprop.0+0x78>
 8003f9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003fa2:	f1bc 0f19 	cmp.w	ip, #25
 8003fa6:	d804      	bhi.n	8003fb2 <_strtol_l.constprop.0+0xc6>
 8003fa8:	3c57      	subs	r4, #87	; 0x57
 8003faa:	e7db      	b.n	8003f64 <_strtol_l.constprop.0+0x78>
 8003fac:	f04f 3eff 	mov.w	lr, #4294967295
 8003fb0:	e7e6      	b.n	8003f80 <_strtol_l.constprop.0+0x94>
 8003fb2:	f1be 3fff 	cmp.w	lr, #4294967295
 8003fb6:	d105      	bne.n	8003fc4 <_strtol_l.constprop.0+0xd8>
 8003fb8:	2322      	movs	r3, #34	; 0x22
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	4646      	mov	r6, r8
 8003fbe:	b942      	cbnz	r2, 8003fd2 <_strtol_l.constprop.0+0xe6>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	e79e      	b.n	8003f02 <_strtol_l.constprop.0+0x16>
 8003fc4:	b107      	cbz	r7, 8003fc8 <_strtol_l.constprop.0+0xdc>
 8003fc6:	4276      	negs	r6, r6
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d0f9      	beq.n	8003fc0 <_strtol_l.constprop.0+0xd4>
 8003fcc:	f1be 0f00 	cmp.w	lr, #0
 8003fd0:	d000      	beq.n	8003fd4 <_strtol_l.constprop.0+0xe8>
 8003fd2:	1e69      	subs	r1, r5, #1
 8003fd4:	6011      	str	r1, [r2, #0]
 8003fd6:	e7f3      	b.n	8003fc0 <_strtol_l.constprop.0+0xd4>
 8003fd8:	2430      	movs	r4, #48	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1b1      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	e7af      	b.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fe2:	2c30      	cmp	r4, #48	; 0x30
 8003fe4:	d0a5      	beq.n	8003f32 <_strtol_l.constprop.0+0x46>
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	e7ab      	b.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fea:	bf00      	nop
 8003fec:	080041c8 	.word	0x080041c8

08003ff0 <_strtol_r>:
 8003ff0:	f7ff bf7c 	b.w	8003eec <_strtol_l.constprop.0>

08003ff4 <_strtoul_l.constprop.0>:
 8003ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff8:	4f36      	ldr	r7, [pc, #216]	; (80040d4 <_strtoul_l.constprop.0+0xe0>)
 8003ffa:	4686      	mov	lr, r0
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	4628      	mov	r0, r5
 8004000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004004:	5d3e      	ldrb	r6, [r7, r4]
 8004006:	f016 0608 	ands.w	r6, r6, #8
 800400a:	d1f8      	bne.n	8003ffe <_strtoul_l.constprop.0+0xa>
 800400c:	2c2d      	cmp	r4, #45	; 0x2d
 800400e:	d130      	bne.n	8004072 <_strtoul_l.constprop.0+0x7e>
 8004010:	782c      	ldrb	r4, [r5, #0]
 8004012:	2601      	movs	r6, #1
 8004014:	1c85      	adds	r5, r0, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d057      	beq.n	80040ca <_strtoul_l.constprop.0+0xd6>
 800401a:	2b10      	cmp	r3, #16
 800401c:	d109      	bne.n	8004032 <_strtoul_l.constprop.0+0x3e>
 800401e:	2c30      	cmp	r4, #48	; 0x30
 8004020:	d107      	bne.n	8004032 <_strtoul_l.constprop.0+0x3e>
 8004022:	7828      	ldrb	r0, [r5, #0]
 8004024:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004028:	2858      	cmp	r0, #88	; 0x58
 800402a:	d149      	bne.n	80040c0 <_strtoul_l.constprop.0+0xcc>
 800402c:	786c      	ldrb	r4, [r5, #1]
 800402e:	2310      	movs	r3, #16
 8004030:	3502      	adds	r5, #2
 8004032:	f04f 38ff 	mov.w	r8, #4294967295
 8004036:	2700      	movs	r7, #0
 8004038:	fbb8 f8f3 	udiv	r8, r8, r3
 800403c:	fb03 f908 	mul.w	r9, r3, r8
 8004040:	ea6f 0909 	mvn.w	r9, r9
 8004044:	4638      	mov	r0, r7
 8004046:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800404a:	f1bc 0f09 	cmp.w	ip, #9
 800404e:	d815      	bhi.n	800407c <_strtoul_l.constprop.0+0x88>
 8004050:	4664      	mov	r4, ip
 8004052:	42a3      	cmp	r3, r4
 8004054:	dd23      	ble.n	800409e <_strtoul_l.constprop.0+0xaa>
 8004056:	f1b7 3fff 	cmp.w	r7, #4294967295
 800405a:	d007      	beq.n	800406c <_strtoul_l.constprop.0+0x78>
 800405c:	4580      	cmp	r8, r0
 800405e:	d31b      	bcc.n	8004098 <_strtoul_l.constprop.0+0xa4>
 8004060:	d101      	bne.n	8004066 <_strtoul_l.constprop.0+0x72>
 8004062:	45a1      	cmp	r9, r4
 8004064:	db18      	blt.n	8004098 <_strtoul_l.constprop.0+0xa4>
 8004066:	fb00 4003 	mla	r0, r0, r3, r4
 800406a:	2701      	movs	r7, #1
 800406c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004070:	e7e9      	b.n	8004046 <_strtoul_l.constprop.0+0x52>
 8004072:	2c2b      	cmp	r4, #43	; 0x2b
 8004074:	bf04      	itt	eq
 8004076:	782c      	ldrbeq	r4, [r5, #0]
 8004078:	1c85      	addeq	r5, r0, #2
 800407a:	e7cc      	b.n	8004016 <_strtoul_l.constprop.0+0x22>
 800407c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004080:	f1bc 0f19 	cmp.w	ip, #25
 8004084:	d801      	bhi.n	800408a <_strtoul_l.constprop.0+0x96>
 8004086:	3c37      	subs	r4, #55	; 0x37
 8004088:	e7e3      	b.n	8004052 <_strtoul_l.constprop.0+0x5e>
 800408a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800408e:	f1bc 0f19 	cmp.w	ip, #25
 8004092:	d804      	bhi.n	800409e <_strtoul_l.constprop.0+0xaa>
 8004094:	3c57      	subs	r4, #87	; 0x57
 8004096:	e7dc      	b.n	8004052 <_strtoul_l.constprop.0+0x5e>
 8004098:	f04f 37ff 	mov.w	r7, #4294967295
 800409c:	e7e6      	b.n	800406c <_strtoul_l.constprop.0+0x78>
 800409e:	1c7b      	adds	r3, r7, #1
 80040a0:	d106      	bne.n	80040b0 <_strtoul_l.constprop.0+0xbc>
 80040a2:	2322      	movs	r3, #34	; 0x22
 80040a4:	f8ce 3000 	str.w	r3, [lr]
 80040a8:	4638      	mov	r0, r7
 80040aa:	b932      	cbnz	r2, 80040ba <_strtoul_l.constprop.0+0xc6>
 80040ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b0:	b106      	cbz	r6, 80040b4 <_strtoul_l.constprop.0+0xc0>
 80040b2:	4240      	negs	r0, r0
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d0f9      	beq.n	80040ac <_strtoul_l.constprop.0+0xb8>
 80040b8:	b107      	cbz	r7, 80040bc <_strtoul_l.constprop.0+0xc8>
 80040ba:	1e69      	subs	r1, r5, #1
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	e7f5      	b.n	80040ac <_strtoul_l.constprop.0+0xb8>
 80040c0:	2430      	movs	r4, #48	; 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1b5      	bne.n	8004032 <_strtoul_l.constprop.0+0x3e>
 80040c6:	2308      	movs	r3, #8
 80040c8:	e7b3      	b.n	8004032 <_strtoul_l.constprop.0+0x3e>
 80040ca:	2c30      	cmp	r4, #48	; 0x30
 80040cc:	d0a9      	beq.n	8004022 <_strtoul_l.constprop.0+0x2e>
 80040ce:	230a      	movs	r3, #10
 80040d0:	e7af      	b.n	8004032 <_strtoul_l.constprop.0+0x3e>
 80040d2:	bf00      	nop
 80040d4:	080041c8 	.word	0x080041c8

080040d8 <_strtoul_r>:
 80040d8:	f7ff bf8c 	b.w	8003ff4 <_strtoul_l.constprop.0>

080040dc <_malloc_usable_size_r>:
 80040dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e0:	1f18      	subs	r0, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfbc      	itt	lt
 80040e6:	580b      	ldrlt	r3, [r1, r0]
 80040e8:	18c0      	addlt	r0, r0, r3
 80040ea:	4770      	bx	lr

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
